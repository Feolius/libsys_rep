<?php

/**
 * @file
 * 
 */

/**
 * Implementation of hook_install().
 */
function multistep_adl_install() {
  // Set multistep_adl to a higher weight so that it allows extra fields to load first.
  db_update('system')
    ->fields(array(
      'weight' => 10,
    ))
    ->condition('name', 'multistep_adl')
    ->execute();
  // Clear cache to take into account the change in forms immediately.
  //cache_clear_all('content_type_info', 'cache_content');
}

/**
 * Implementation of hook_schema().
 */
function multistep_adl_schema() {
  $schema['multistep_adl'] = array(
    'description' => 'Keeps track of submitted steps in multistep_adl forms.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The primary identifier for a node.'
      ),
      'step' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'A particular step of the nid.'
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The status of the step.'
      ),
    ),
    'primary key' => array('nid', 'step'),
    'indexes' => array(
      'multistep_adl_nid_step' => array('nid', 'step'),
      'multistep_adl_status' => array(array('status', 1)),
    ),
  );
  return $schema;
}

/**
 * Implementation of hook_enable().
 *
function multistep_adl_enable() {
  // Clear cache to take into account the change in forms immediately.
  cache_clear_all('content_type_info', 'cache_content');
}

/**
 * Implementation of hook_disable().
 *
function multistep_adl_disable() {
  // Clear cache to take into account the change in forms immediately.
  cache_clear_all('content_type_info', 'cache_content');
}

/**
 * Implementation of hook_uninstall().
 */
function multistep_adl_uninstall() {
  // Remove variables created by the module.
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    variable_del('multistep_adl_expose_' . $node_type->type);
    variable_del('multistep_adl_menu_' . $node_type->type);
    variable_del('multistep_adl_progress_' . $node_type->type);
    variable_del('multistep_adl_steps_' . $node_type->type);
    variable_del('multistep_adl_buttons_' . $node_type->type);
    variable_del('multistep_adl_default_' . $node_type->type);
    /*
    * @todo Verify how Field API handles extra fields
    foreach ($node_type['extra'] as $extra_field) {
      variable_del('multistep_adl_extra_' . $extra_field . '_' . $content_type['type']);
    }*/
  }
  variable_del('multistep_adl_status_revisions');
  variable_del('multistep_adl_status_publishing');
  variable_del('multistep_adl_button_prev');
  variable_del('multistep_adl_button_next');
  variable_del('multistep_adl_button_save');
  variable_del('multistep_adl_button_done');
  // Clear cache to take into account the change in forms immediately.
  //cache_clear_all('content_type_info', 'cache_content');
  //cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_update_N().
 */
function multistep_adl_update_6100(&$sandbox) {
  $schema['multistep_adl'] = array(
    'fields' => array(
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'The primary identifier for a node.'),
      'step' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'A particular step of the nid.'),
      'status' => array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => '', 'description' => 'The status of the step.'),
    ),
    'description' => t('Keeps track of submitted steps in multistep_adl forms.'),
  );
  db_create_table('multistep_adl', $schema['multistep_adl']);
}

function multistep_adl_update_6101(&$sandbox) {
  // Remove variables for old settings created by the module.
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    variable_del('multistep_adl_button_prev_' . $node_type->type);
    variable_del('multistep_adl_button_next_' . $node_type->type);
    variable_del('multistep_adl_button_save_' . $node_type->type);
    variable_del('multistep_adl_button_done_' . $node_type->type);
  }
}

function multistep_adl_update_6102(&$sandbox) {
  // Set multistep_adl to a higher weight so that it allows extra fields to load first.
  db_update('system')
    ->fields(array(
      'weight' => 10,
    ))
    ->condition('name', 'multistep_adl')
    ->execute();
}

function multistep_adl_update_6103(&$sandbox) {
  // Add indexes for faster querying.
  db_add_primary_key('multistep_adl', array('nid', 'step'));
  db_add_index('multistep_adl', 'multistep_adl_nid_step', array('nid', 'step'));
  db_add_index('multistep_adl', 'multistep_adl_status', array(array('status', 1)));
}

function multistep_adl_update_7100(&$sandbox) {
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    $enabled = variable_get('multistep_adl_expose_' . $node_type->type, 0);
    variable_set('multistep_adl_enabled_' . $node_type->type, $enabled);
    variable_del('multistep_adl_expose_' . $node_type->type);
    variable_del('multistep_adl_buttons_' . $node_type->type);
  }
}

function multistep_adl_update_7101(&$sandbox) {
  variable_del('multistep_adl_show_step_numbers');
  $spec = array(
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => '',
    'description' => 'A particular step of the nid.',
  );
  $keys_new = array(
    'primary key' => array('nid', 'step'),
    'indexes' => array(
      'multistep_adl_nid_step' => array('nid', 'step'),
    ),
  );
  db_drop_primary_key('multistep_adl');
  db_drop_index('multistep_adl', 'multistep_adl_nid_step');
  db_change_field('multistep_adl', 'step', 'step', $spec, $keys_new);
}
