<?php

/**
 * Implements hook_block_info()
 */
function collection_pager_block_block_info() {
  $blocks['collection_pager'] = array(
    'info' => t('Collection pager')
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function collection_pager_block_block_view($delta) {
  if (isset($_GET['sqid']) && isset($_SESSION['facet_collection_solr_queries'][$_GET['sqid']])) {
    $block['subject'] = t('Collection Pager');
    $block['content'] = drupal_get_form('collection_pager_block_form');
    drupal_add_css(drupal_get_path('module', 'collection_pager_block') . '/css/collection-pager-block-buttons.css');
    drupal_add_js(drupal_get_path('module', 'collection_pager_block') . '/js/collection-pager-block.js');
    return $block;
  }
}

/**
 * Form callback for collection pager block
 */
function collection_pager_block_form($form, &$form_state) {
  $current = $_GET['curr'] + 1;
  $numfound = $_GET['numFound'];
  $label = $current . ' of ' . $numfound;
  $previous_button_disabled = ($current == 1);
  $next_button_disabled = ($current == $numfound);
  $form = array(
    'previous_page_button' => array(
      '#type' => 'submit',
      '#disabled' => $previous_button_disabled,
      '#name' => 'previous_page_button',
      '#submit' => array('collection_pager_block_submit'),
    ),
    'progress_label' => array(
      '#type' => 'item',
      '#markup' => '<div class="desription">' . $label . ' </div>',
    ),
    'next_page_button' => array(
      '#type' => 'submit',
      '#disabled' => $next_button_disabled,
      '#name' => 'next_page_button',
      '#submit' => array('collection_pager_block_submit'),
    ),
    'result_number' => array(
      '#type' => 'textfield',
      '#description' => t('Enter Results Number'),
      '#size' => 10,
    ),
    'go_to_the_page_button' => array(
      '#type' => 'submit',
      '#value' => t('Go!'),
      '#name' => 'go_to_the_page_button',
      '#submit' => array('collection_pager_block_submit'),
    ),
  );
  return $form;
}

/**
 * Submit callback for collection pager form
 */
function collection_pager_block_submit($form, &$form_state) {
  $triggering_element = isset($form_state['triggering_element']['#name']) ? $form_state['triggering_element']['#name'] : NULL;
  switch ($triggering_element) {
    case 'go_to_the_page_button':
      $number = (Integer) ($form_state['input']['result_number'] - 1);
      break;
    case 'previous_page_button':
      $number = $_GET['curr'] - 1;
      break;
    case 'next_page_button':
      $number = $_GET['curr'] + 1;
      break;
  }
  $query = $_SESSION['facet_collection_solr_queries'][$_GET['sqid']];
  $query->replaceParam('hl', FALSE);
  $query->replaceParam('start', $number);
  $query->replaceParam('rows', 1);
  // This code block from apachesolr_do_query() function.
  $keys = $query->getParam('q');
  if (strlen($keys) == 0 && ($filters = $query->getFilters())) {
    $qalt = array();
    foreach ($filters as $filter) {
      // Move the fq param if it has no local params and is not negative.
      if (!$filter['#exclude'] && !$filter['#local']) {
        $qalt[] = '(' . $query->makeFilterQuery($filter) . ')';
        $query->removeFilter($filter['#name'], $filter['#value'], $filter['#exclude']);
      }
    }
    if ($qalt) {
      $query->addParam('q.alt', implode(' ', $qalt));
    }
  }
  $keys = htmlspecialchars($keys, ENT_NOQUOTES, 'UTF-8');
  $keys = str_replace("'", '&#039;', $keys);
  $response = $query->search($keys);

  $nid = $response->response->docs[0]->entity_id;
  // Submit form with needed GET params.
  $get_params = $_GET;
  unset($get_params['q']);
  $options['query'] = $get_params;
  $options['query']['curr'] = $number;
  // Check numFound after each query, because it can be some situation, when user make
  // new search query and results will be changed.
  $options['query']['numFound'] = $response->response->numFound;
  $path = 'node/' . $nid;
  $form_state['redirect'] = array(
    $path,
    $options,
    302
  );
}

/**
 * Validate callback for date filter form
 */
function collection_pager_block_form_validate($form, &$form_state) {

  $triggering_element = isset($form_state['triggering_element']['#parents'][0]) ? $form_state['triggering_element']['#parents'][0] : NULL;
  if ($triggering_element == 'go_to_the_page_button') {
    //Check that input information is integer and less than number of results
    $number = $form_state['input']['result_number'];
    $is_int = !is_int($number) ? (ctype_digit($number)) : TRUE;
    if ($is_int == FALSE) {
      form_set_error('result_number', t('Only numbers can be put there.'));
    }
    $max_number = $_GET['numFound'];
    if ($number > $max_number) {
      form_set_error('result_number', t('Please put a correct number. Number should be less than @numFound', array('@numFound' => $max_number)));
    }
  }
}