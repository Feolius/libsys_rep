<?php

/**
 * Implements hook_menu().
 */
function manage_filters_ui_menu() {
    $items = array();
    foreach (entity_get_info() as $entity_type => $entity_info) {
        if ($entity_info['fieldable'] && $entity_type == 'node') {
            foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
                if (isset($bundle_info['admin'])) {
                    // Extract path information from the bundle.
                    $path = $bundle_info['admin']['path'];
                    // Different bundles can appear on the same path (e.g. %node_type and
                    // %comment_node_type). To allow field_ui_menu_load() to extract the
                    // actual bundle object from the translated menu router path
                    // arguments, we need to identify the argument position of the bundle
                    // name string ('bundle argument') and pass that position to the menu
                    // loader. The position needs to be casted into a string; otherwise it
                    // would be replaced with the bundle name string.
                    if (isset($bundle_info['admin']['bundle argument'])) {
                        $bundle_arg = $bundle_info['admin']['bundle argument'];
                        $bundle_pos = (string) $bundle_arg;
                    } else {
                        $bundle_arg = $bundle_name;
                        $bundle_pos = '0';
                    }
                    // This is the position of the %field_ui_menu placeholder in the
                    // items below.
                    $field_position = count(explode('/', $path)) + 1;

                    // Extract access information, providing defaults.
                    $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
                    $access += array(
                        'access callback' => 'user_access',
                        'access arguments' => array('administer site configuration'),
                    );
                    // 'Manage filters' tab.
                    //TODO: find other way to check. It is hardcode. It should be used only for default case.
                    $path_elements = explode('/', $path);
                    if (!in_array('comment', $path_elements)) {
                        $items["$path/filters"] = array(
                            'title' => t('Manage filters'),
                            'page callback' => 'drupal_get_form',
                            'page arguments' => array('manage_filters_ui_filters_overview_form', $entity_type, $bundle_arg),
                            'type' => MENU_LOCAL_TASK,
                            'weight' => 2,
                            'file' => 'manage_filters_ui.admin.inc',
                                ) + $access;
                    }
                }
            }
        }
    }
    return $items;
}

/**
 * Implements hook_element_info().
 */
function manage_filters_ui_element_info() {
    return array(
        'filters_ui_table' => array(
            '#theme' => 'filters_ui_table',
            '#pre_render' => array('manage_filters_ui_table_pre_render'),
            '#regions' => array('' => array()),
        ),
    );
}

/**
 * Implements hook_theme().
 */
function manage_filters_ui_theme() {
    return array(
        'filters_ui_table' => array(
            'render element' => 'elements',
        ),
    );
}

/**
 * Implements hook_field_delete().
 */
function manage_fiters_ui_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
    $facet_filters = drupal_json_decode(variable_get('facet_collection_filters'));
    
    $bundle = $instance['bundle'];
    $field_name = $field['field_name'];
    dpm($bundle,'BUNDLE');
    dpm($field_name,'FIELD');
    dpm($facet_filters, 'FACET_FILTERS');
    //Erase information of deleting field from existing version of facet_collections_filters
    //and facet_collections_filters_settings
    if (isset($facet_filters[$bundle])) {
        if (isset($facet_filters[$bundle][$field_name])) {
            unset($facet_filters[$bundle][$field_name]);
            $facet_fiters_settings = drupal_json_decode(variable_get('facet_collection_filters_settings'));
            if ($field['type'] == 'taxonomy_term_reference') {
                $vocabulary = $field_info['settings']['allowed_values'][0]['vocabulary'];
                unset($facet_fiters_settings[$field['type']][$vocabulary][$bundle]);
            } elseif ($field['type'] == 'node_reference') {
                unset($facet_fiters_settings[$field['type']][$field_name][$bundle]);
            } elseif ($field['type'] == 'datetime' || $field['type'] == 'datestamp' || $field['type'] == 'date') {
                unset($facet_fiters_settings[$field['type']][$bundle]);
            }
            variable_set('facet_collection_filters', drupal_json_encode($facet_filters));
            variable_set('facet_collection_filters_settings', drupal_json_encode($facet_fiters_settings));
        }
    }
}