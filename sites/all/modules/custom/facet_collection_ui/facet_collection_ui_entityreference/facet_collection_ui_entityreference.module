<?php

/**
 * Implements hook_facet_collection_ui_field_type_info().
 */
function facet_collection_ui_entityreference_facet_collection_ui_field_type_info() {
  return array('entityreference');
}

/**
 * Implements hook_facet_collection_ui_summary().
 */
function facet_collection_ui_entityreference_facet_collection_ui_summary($field, $ref_filters) {
  $summary = "";
  $filterable_fields = _facet_collection_ui_entityreference_get_referenced_filterable_fields($field);
  if (!empty($filterable_fields)) {
    if (empty($ref_filters)) {
      $summary = 'No filters are chosen';
    }
    else {
      $summary = "";

      foreach ($ref_filters as $ref_type_name => $ref_type_filters) {
        $filters = "";
        foreach ($ref_type_filters as $ref_filter_name => $ref_filter) {
          $instance = field_info_instance("node", $ref_filter_name, $ref_type_name);
          if ($instance && $ref_filter['state'] == 'visible') {
            $filters = $filters . $instance['label'] . ", ";
          }
        }
        $filters = substr($filters, 0, strlen($filters) - 2);
        if (!empty($filters)) {
          $summary = $summary . "Filters for content type " . $ref_type_name . ": " . $filters . "<br>";
        }
      }
    }

  }
  return $summary;
}

/**
 * Implements hook_facet_collection_ui_settings_form().
 */
function facet_collection_ui_entityreference_facet_collection_ui_settings_form($field, $ref_filters, $form, &$form_state) {
  $filterable_fields = _facet_collection_ui_entityreference_get_referenced_filterable_fields($field);
  if (!empty($filterable_fields)) {

    foreach ($filterable_fields as $ref_type => $filters_list) {
      $chosen_filters = array();
      foreach ($filters_list as $filter_name => $filter) {
        if (isset($ref_filters[$ref_type])) {
          if ($ref_filters[$ref_type][$filter_name]['state'] == 'visible') {
            array_push($chosen_filters, $filter_name);
          }
        }
      }
      $form[$ref_type] = array(
        '#type' => 'fieldset',
        '#title' => t('Filters for content type ' . $ref_type),
      );
      $form[$ref_type]['filters'] = array(
        '#type' => 'checkboxes',
        '#options' => $filters_list,
        '#default_value' => $chosen_filters,
        '#title' => t('Choose fields for filtering'),
      );
    }
    $context = array(
      'field' => $field,
    );
    drupal_alter('facet_collection_ui_entityreference_filter_settings_form', $form, $form_state, $context);
    return $form;
  }
  else {
    return array();
  }
}

/**
 * Implements hook_facet_collection_ui_delete_field().
 */
function facet_collection_ui_entityreference_facet_collection_ui_delete_field($field, $bundle, &$facet_filters_settings, $filter) {
  //Delete information about referenced filters
  if (isset($filter['referenced_filters'])) {
    if (isset($facet_filters_settings[$field['type']][$field['field_name']]['settings'])) {
      $facet_filters_settings[$field['type']][$field['field_name']]['settings'] = array();
    }
  }
}

/**
 * Implements hook_facet_collection_ui_add_field().
 */
function facet_collection_ui_entityreference_facet_collection_ui_add_field($field, $bundle, &$facet_filters_settings, $filter) {
  if (!isset($facet_filters_settings[$field['type']][$field['field_name']])) {
    $facet_filters_settings[$field['type']][$field['field_name']] = array();
  }
  if ($filter['state'] == 'visible') {
    $facet_filters_settings[$field['type']][$field['field_name']]['state'] = TRUE;
  }
  else {
    $facet_filters_settings[$field['type']][$field['field_name']]['state'] = FALSE;
  }

  //Add information about referenced filters
  if (isset($filter['referenced_filters'])) {
    $entity_reference_filters_settings = array();
    foreach ($filter['referenced_filters'] as $ref_bundle => $ref_filters) {
      foreach ($ref_filters as $ref_filter_name => $ref_filter) {
        $ref_field = field_info_field($ref_filter_name);
        if ($ref_filter['state'] == 'visible' && $ref_field['type'] != 'date'
          && $ref_field['type'] != 'datestamp' && $ref_field['type'] != 'datetime'
        ) {
          $entity_reference_filters_settings[$ref_filter_name] = array();
        }
      }
    }
    $facet_filters_settings[$field['type']][$field['field_name']]['settings'] = $entity_reference_filters_settings;
  }
}

/**
 * Return list of referenced filterable fields for each referencable_type for some field
 */
function _facet_collection_ui_entityreference_get_referenced_filterable_fields($field) {
  $referenced_filterable_fields = array();
  $filterable_type_list = facet_collection_ui_submodules_info();
  $valid_referenced_fields_types = array_diff(array_keys($filterable_type_list), array(
    'date',
    'datetime',
    'datestamp'
  ));

  if ($field['type'] == 'entityreference' && $field['settings']['target_type'] == 'node') {
    foreach ($field['settings']['handler_settings']['target_bundles'] as $ref_type) {
      $ref_instances = field_info_instances('node', $ref_type);
      $filters_list = array();
      foreach ($ref_instances as $ref_instance) {
        $ref_field = field_info_field($ref_instance['field_name']);
        if (array_search($ref_field['type'], $valid_referenced_fields_types)) {
          $filters_list[$ref_instance['field_name']] = $ref_instance['label'];
        }
      }
      if (!empty($filters_list)) {
        $referenced_filterable_fields[$ref_type] = $filters_list;
      }
    }
  }
  return $referenced_filterable_fields;
}


/**
 * Implements hook_facet_collection_ui_filter_by().
 */
function facet_collection_ui_entityreference_facet_collection_ui_filter_by($field) {
  return 'Node Reference';
}

/**
 * Implements hook_field_update_field().
 */
function facet_collection_ui_entityreference_field_update_field($field, $prior_field, $has_data) {
  if ($field['type'] == 'entityreference' && $field['settings']['target_type'] == 'node'
    && isset($prior_field['settings']['handler_settings']['target_bundles'])
  ) {
    $facet_filters_settings = drupal_json_decode(variable_get('facet_collection_filters_settings'));
    //Update information about current field in existing version of facet_collections_filters_settings common variable
    $old_referenced_bundles = $prior_field['settings']['handler_settings']['target_bundles'];
    $new_referenced_bundles = $field['settings']['handler_settings']['target_bundles'];
    //Get difference between old and new array of referenced bundles
    $difference = array_diff($old_referenced_bundles, $new_referenced_bundles);
    if (!empty($difference)) {
      //If difference not empty then it need to update in storage structures
      //Get intersection between old and new array of referenced bundles to define
      // is one of bundles was disables and we need to delete him from storage structure
      $intersection = array_intersect($old_referenced_bundles, $new_referenced_bundles);
      if ($old_referenced_bundles != $intersection) {
        $deleted_bundles = array_diff($old_referenced_bundles, $intersection);
        $facet_filters = drupal_json_decode(variable_get('facet_collection_filters'));
        foreach ($facet_filters as $bundle_name => $filters) {
          if (array_key_exists($field['field_name'], $filters)) {
            foreach ($deleted_bundles as $del_bundle_name => $del_bundle) {
              if (isset($facet_filters[$bundle_name][$field['field_name']]['referenced_filters'][$del_bundle_name])) {
                foreach ($facet_filters[$bundle_name][$field['field_name']]['referenced_filters'][$del_bundle_name] as $filter_name => $filter) {
                  if ($filter['state'] == 'visible') {
                    unset($facet_filters_settings[$field['type']][$field['field_name']['settings']][$filter_name]);
                  }
                }
                unset($facet_filters[$bundle_name][$field['field_name']]['referenced_filters'][$del_bundle_name]);
              }

            }
          }
        }
        variable_set('facet_collection_filters', drupal_json_encode($facet_filters));
        variable_set('facet_collection_filters_settings', drupal_json_encode($facet_filters_settings));
      }

    }
  }
}