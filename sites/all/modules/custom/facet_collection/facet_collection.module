<?php

/**
 * Implements hook_init()
 */
//function facet_collection_init() {
//  //We will check if get parameters is good, and redirect it to default state of library page, if not
//  if (arg(0) == 'library') {
//    //Check if we have right filtered content type
//    $filtered_content_type = facet_collection_get_filtered_content_type();
//    if ($filtered_content_type) {
//      $environment = apachesolr_default_environment();
//      $indexed_bundles = apachesolr_get_index_bundles($environment, 'node');
//      if (in_array($filtered_content_type, $indexed_bundles)) {
//        return;
//      }
//    }
//    //Something is wrong with filtered content type. Redirect to default library page state
//    $query['f'][0] = 'bundle:files';
//    drupal_goto('library', array('query' => $query));
//  }
//}

/**
 * Implements hook_menu()
 */
function facet_collection_menu() {
  $items['library'] = array(
    'title' => t('Library'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'facet_collection_page',
    'page arguments' => array(),
    'access arguments' => array('search content'),
    'file' => 'facet_collection_field_relevancy.inc'
  );
  //This paths are used for displaing collection teasers
  $items['collection-teaser/node'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'facet_collection_collection_teaser',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback for returning collection teaser for the node
 */
function facet_collection_collection_teaser($nid) {
  $node = node_load($nid);
  $node_teaser = node_view($node, 'collection_teaser');
  $render = render($node_teaser);
  print $render;
  exit;
}

/**
 * Page callback for collection
 */
function facet_collection_page() {
  $query = facet_collection_build_solr_query($_GET);
  list($final_query, $response) = apachesolr_do_query($query);
  // We should save all get params in session to allow another modules use it if needed.
  // Solr query id in session.
  $sqid = & drupal_static('faset_collection_solr_query_id');
  $sqid = mt_rand();
  $_SESSION['facet_collection_get_params'][$sqid] = $_GET;
  $env_id = $query->solr('getId');
  apachesolr_has_searched($env_id, TRUE);
  $results = apachesolr_search_process_response($response, $final_query);
  $build = theme('facet_collection_search_results__alter', array('results' => $results));
  return $build;
}

/**
 * Build solr query by given get params. We pass get params as argument, because we want to use this function in another
 * modules, where get params could be presented not explicitly.
 */
function facet_collection_build_solr_query($get_params) {
  $environment = apachesolr_default_environment();
  $solr = apachesolr_get_solr($environment);
  $params = facet_collection_get_default_params($get_params);
  $query_parts = explode('/', $get_params['q']);
  $query = apachesolr_drupal_query('apachesolr', $params, '', $query_parts[0], $solr);
  if ($query->getParam('q')) {
    apachesolr_search_add_spellcheck_params($query);
  }
  $page = pager_find_page();
  $query->page = $page;
  return $query;
}

/**
 * Get needed params to make solr query.
 */
function facet_collection_get_default_params($get_params) {
  require_once 'facet_collection_field_relevancy.inc';
// The logic is next: if we have 's' parameter in the page query it means that we have complicated search based on usual search,
// which goes from search block, and search from one or more search filters from facet collection filter block. Moreover, here can be such
// situation when we don't have usual search, only search from filter block appears here. In this case 's' will be here too.
// Anyway 's' goes from filters block. If 's' is here we need to present solr query as conjunction of solr subqueries, i.e.
// q=_query_:"{!dismax qf=... }term1" AND _query_:"{!dismax qf=... }term2". If we have only usual search it will be solr query
// based on dismax query parser q=term&qf='list of all searchable fields with their boosts'&defType=dismax.
  $params = array();
  $params += apachesolr_search_basic_params();
  unset($params['hl.fl']);
  unset($params['rows']);
  if (isset($get_params['rNum'])) {
    $params['rows'] = $get_params['rNum'];
  } else {
    $facet_collection_rows_number_variants = variable_get('facet_collection_rows_number_variants', '25 50 100');
    $facet_collection_rows_number_variants = explode(' ', $facet_collection_rows_number_variants);
    $params['rows'] = $facet_collection_rows_number_variants[0];
  }
  $params['hl'] = 'true';
  $params['hl.fl'] = _facet_collection_build_hl_fl_parameter();
  $boosts = facet_collection_get_field_boosts();
  $query_parts = explode('/', $get_params['q']);
  if (isset($query_parts[1])) {
    $search_query = $query_parts[1];
  } else {
    $search_query = FALSE;
  }
  if (!isset($get_params['s'])) {
    $params['defType'] = 'dismax';
    if ($search_query) {
      $query = _facet_collection_replace_spacers_by_AND($search_query);
      $params['q'] = $query;
    }
    //Build qf parameter
    $qf = _facet_collection_build_qf_parameter($boosts);
    if (!empty($qf)) {
      $qf = trim($qf);
      $params['qf'] = $qf;
    }
    //Highlighting should be only in that fields which included in qf parameter
  } else {
    $params['defType'] = 'lucene';
    $q = '';
    if ($search_query) {
      $base_qf = _facet_collection_build_qf_parameter($boosts);
      $query = _facet_collection_replace_spacers_by_AND($search_query);
      $q[] = '_query_:"{!dismax ' . 'qf=\'' . $base_qf . '\'}' . $query . '"';
    }
    $searchable_fields_info = facet_collection_get_search_filters_info();
    foreach ($get_params['s'] as $search_filter) {
      $search_filter_parts = explode(':', $search_filter);
      $field_name = $search_filter_parts[0];
      $index_field_name = $searchable_fields_info[$field_name]['index_field_name'];
      $query = _facet_collection_replace_spacers_by_AND($search_filter_parts[1]);
      $q[] = '_query_:"{!dismax qf=' . $index_field_name . '^' . $boosts[$field_name] . '}' . $query . '"';
    }
    $params['q'] = implode(' AND ', $q);
  }
  $params['fq'] = 'entity_type:node';
  return $params;
}

/**
 * Replace spacers in query by ' AND ' operator
 */
function _facet_collection_replace_spacers_by_AND($query) {
  $operators = array('AND', 'OR', '&&', 'NOT');
  $query_arr = explode(' ', $query);
  $quote_found = FALSE;
  for ($n = 0; $n < count($query_arr); $n++) {
    if (strpos($query_arr[$n], '"') !== FALSE) {
      $quote_found = !$quote_found;
    }
    if (!$quote_found) {
      if (in_array($query_arr[$n], $operators)) {
        continue;
      } elseif (isset($query_arr[$n + 1])) {
        if (in_array($query_arr[$n + 1], $operators)) {
          $n++;
        } else {
          $query_arr[$n] .= ' AND';
        }
      }
    }
  }
  $query = implode(' ', $query_arr);
  return $query;
}

/**
 * Build 'qf' parameter for solr query for base search.
 */
function _facet_collection_build_qf_parameter($boosts) {
  $qf = '';
  $chosen_content_type = facet_collection_get_filtered_content_type();
  $field_type_list = variable_get('facet_collection:field_type_search_list');
  $searchable_fields = facet_collection_get_searchable_fields(array_keys($field_type_list));
  if (!empty($chosen_content_type)) {
    $needed_fields = $searchable_fields[$chosen_content_type];
    $qf = $qf . 'label^' . $boosts['title_' . $chosen_content_type] . ' ';
  } else {
    $qf = $qf . 'label^' . $boosts['title'] . ' ';
    $needed_fields = array();
    foreach ($searchable_fields as $fields) {
      $needed_fields = array_merge($needed_fields, $fields);
    }
  }
  foreach ($needed_fields as $field_name) {
    $field_info = field_info_field($field_name);
    $module = $field_type_list[$field_info['type']];
    $index_field_name = module_invoke($module, 'facet_collection_index_field_name', $field_name);
    if (isset($boosts[$field_name])) {
      $qf = $qf . $index_field_name . '^' . $boosts[$field_name] . ' ';
    }
  }
  return trim($qf);
}

/**
 * Build 'hl.fl' parameter for solr query
 */
function _facet_collection_build_hl_fl_parameter() {
  $hl_fl = array();
  $chosen_content_type = facet_collection_get_filtered_content_type();
  $field_type_list = variable_get('facet_collection:field_type_search_list');
  $searchable_fields = facet_collection_get_searchable_fields(array_keys($field_type_list));
  if (!empty($chosen_content_type)) {
    $needed_fields = $searchable_fields[$chosen_content_type];
  } else {
    $needed_fields = array();
    foreach ($searchable_fields as $fields) {
      $needed_fields = array_merge($needed_fields, $fields);
    }
  }
  $hl_fl[] = 'label';
  foreach ($needed_fields as $field_name) {
    $field_info = field_info_field($field_name);
    $module = $field_type_list[$field_info['type']];
    $index_field_name = module_invoke($module, 'facet_collection_index_field_name', $field_name);
    $hl_fl[] = $index_field_name;
  }
  return $hl_fl;
}

/**
 * Return an array which contain info about all available search filters(according to filter settings).
 * The keys are field names of needed fields and values are associative arrays with a label and index field name for corresponding filter.
 */
function facet_collection_get_search_filters_info() {
  $info = & drupal_static(__FUNCTION__);
  if (empty($info)) {
    $info = array();
    $field_type_list = variable_get('facet_collection:field_type_search_list');
    $filtered_content_type = facet_collection_get_filtered_content_type();
    $filter_settings = facet_collection_get_filter_settings();
    $searchable_fields = facet_collection_get_searchable_fields(array_keys($field_type_list));
    $field_names = $searchable_fields[$filtered_content_type];
    foreach ($field_names as $field_name) {
      //Define whether we show filter for field or not
      $field_info = field_info_field($field_name);
      $field_type = $field_info['type'];
      if (isset($filter_settings[$field_type][$field_name])) {
        if (isset($field_type_list[$field_type])) {
          $module = $field_type_list[$field_type];
          $field_name = $field_info['field_name'];
          $index_field_name = module_invoke($module, 'facet_collection_index_field_name', $field_name);
          $instance = field_info_instance('node', $field_name, $filtered_content_type);
          $info[$field_name] = array(
            'label' => t($instance['label']),
            'index_field_name' => $index_field_name,
          );
        }
      }
    }
    //Also we should add title here if needed
    if (isset($filter_settings['title'][$filtered_content_type])) {
      $info['title'] = array(
        'label' => t('title'),
        'index_field_name' => 'label'
      );
    }
  }
  return $info;
}

/**
 * Return list of names for searchable fields, this is an array whose keys are content types and values are array with field names
 * Input argument is a list of field types which is going to be searchable
 */
function facet_collection_get_searchable_fields($field_types) {
  //We should get all field names with corresponding content type names that
  //we need for searching.
  if (!cache_get('facet_collection:field_search_field_names')) {
    $searchable_fields = array();
    $environment = apachesolr_default_environment();
    $content_types = apachesolr_get_index_bundles($environment, 'node');
    $instances = field_info_instances('node');
    foreach ($content_types as $content_type) {
      foreach ($instances[$content_type] as $instance) {
        $field = field_info_field($instance['field_name']);
        if (in_array($field['type'], $field_types)) {
          $searchable_fields[$content_type][] = $instance['field_name'];
        }
      }
    }
    cache_set('facet_collection:field_search_field_names', $searchable_fields, 'cache', CACHE_TEMPORARY);
  } else {
    $searchable_fields = cache_get('facet_collection:field_search_field_names')->data;
  }
  return $searchable_fields;
}

/**
 * Get renderable array that present all facet filters
 */
function facet_collection_get_facet_filters() {
  //We need to collect all facetapi presentations for separate block in one
  //and add titles for each facet.
  $realm_name = 'block';
  $content = array();

  //We need searcher for further actions.
  $searcher_info = facetapi_get_searcher_info();
  $searchers = array_keys($searcher_info);
  $searcher = $searchers[0];

//Get adapter and build block realm to grab all build information
  $adapter = facetapi_adapter_load($searcher);

//We should check facets visibility.
  if (!cache_get('facet_collection:visibility')) {
    facet_collection_set_facets_visibility($adapter, $realm_name, $searcher);
  }
//Get all facets that can be shown because we need only facets that satisfy all chosen content types.
  $available_facets = facet_collection_get_available_facets();

//Build content using facetapi block presentation for each facet
  $enabled_facets = $adapter->getEnabledFacets();
  $builds = facetapi_build_realm($searcher, $realm_name);
  foreach ($available_facets as $field_name => $facet_names) {
    foreach ($facet_names as $facet_name) {
      if (in_array($facet_name, array_keys($builds)) && !empty($builds[$facet_name])) {
        $build = $builds[$facet_name];
        $field_alias = $enabled_facets[$facet_name]['field alias'];
        $title = $build['#title'];
        $build[$field_alias]['#title'] = $title;
        $content[$field_name] = $build;
      }
    }
  }
  return $content;
}

/**
 * Set collection fasets visibility and make record in database
 */
function facet_collection_set_facets_visibility($adapter, $realm_name, $searcher) {
  $realm = facetapi_realm_load($realm_name);
  $data = cache_get('facet_collection:listfacets');
  $facet_list = $data->data;
  foreach ($facet_list as $faset_name) {
    $faset = facetapi_facet_load($faset_name, $searcher);
    facetapi_save_facet_enabled($adapter, $realm, $faset);
  }
  cache_set('facet_collection:visibility', TRUE, 'cache', CACHE_TEMPORARY);
}

/**
 * Filter facet list to show only facets that satisfy all chosen content types
 */
function facet_collection_get_available_facets() {
  $available_facets = array();
  //Get filter settings
  $filter_settings = facet_collection_get_filter_settings();
  $field_type_list = variable_get('facet_collection:field_type_facet_list');
  $facet_collection = variable_get('facet_collection:facet_collection');
//Get all facets for collection from cache
  $data = cache_get('facet_collection:listfacets');
  $facet_list = $data->data;

  //Get content types that should be shown
  $content_type = facet_collection_get_filtered_content_type();

//Perform comparison with content type list of each facet.
//If it is satisfy all chosen  content types we take this facet
  $searcher_info = facetapi_get_searcher_info();
  $searchers = array_keys($searcher_info);
  $searcher = array_shift($searchers);
  foreach ($facet_collection as $field_type => $facet_groups) {
    foreach ($facet_groups as $facet_group => $field_names) {
      foreach ($field_names as $field_name => $facet_names) {
        foreach ($facet_names as $facet_name) {
          if (isset($field_type_list[$field_type])) {
            $module = $field_type_list[$field_type];
            $facet_content_types_array = module_invoke($module, 'facet_collection_facet_content_types', $filter_settings, $facet_group, $facet_name, $searcher);
          }
          if (in_array($content_type, $facet_content_types_array)) {
            $available_facets[$field_name][] = $facet_name;
          }
        }
      }
    }
  }

  return $available_facets;
}

/**
 * Get chosen content types
 */
function facet_collection_get_filtered_content_type() {
  $content_type = & drupal_static(__FUNCTION__);
  if (empty($content_type)) {
    $content_type = '';
    if (isset($_GET['f'])) {
//Check if there are some filters and if it's true check if this filter is content type filter.
      $filters = $_GET['f'];
      foreach ($filters as $filter) {
        $arr = explode(':', $filter);
        if ($arr[0] == 'bundle') {
          $content_type = $arr[1];
        }
      }
    }
  }
  return $content_type;
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE()
 */
function facet_collection_apachesolr_index_document_build_node($filedocument, $node, $env_id) {
  $field_type_facet_list = variable_get('facet_collection:field_type_facet_list');
  $field_type_search_list = variable_get('facet_collection:field_type_search_list');
  $field_type_list = array_merge($field_type_facet_list, $field_type_search_list);
  $node_instances = field_info_instances('node', $node->type);
  foreach ($node_instances as $instance) {
    $field_info = field_info_field($instance['field_name']);
    $field_type = $field_info['type'];
    if (isset($field_type_list[$field_type])) {
      $module = $field_type_list[$field_type];
      $filedocument = module_invoke($module, 'facet_collection_index_field', $filedocument, $node, $field_info);
    }
  }
  $documents = array();
  $documents[] = $filedocument;
  return $documents;
}

/**
 * Implements hook_facetapi_facet_info()
 */
function facet_collection_facetapi_facet_info($searcher_info) {
  //Get filter settings
  $filter_settings = facet_collection_get_filter_settings();
  $facets = array();
  $field_type_facet_list = array();
  $field_type_search_list = array();
  $facet_collection = array();

  //Get information about all field types that should be filtered and corresponding modules which handle these field types
  foreach (module_implements('facet_collection_field_type_info') as $module) {
    $field_types = module_invoke($module, 'facet_collection_field_type_info');
    foreach ($field_types as $filter_type => $field_type_array) {
      if ($filter_type == 'facet') {
        foreach ($field_type_array as $field_type) {
          $field_type_facet_list[$field_type] = $module;
        }
      } elseif ($filter_type == 'search') {
        foreach ($field_type_array as $field_type) {
          $field_type_search_list[$field_type] = $module;
        }
      }
    }
  }

  //Get facets and facet groups for each field according
  if (!empty($filter_settings['filter_order'])) {
    foreach ($filter_settings['filter_order'] as $content_type_field_names) {
      foreach (array_reverse($content_type_field_names) as $field_name) {
        $field_info = field_info_field($field_name);
        $field_type = $field_info['type'];
        if (isset($field_type_facet_list[$field_type])) {
          $module = $field_type_facet_list[$field_type];
          $facet_groups = module_invoke($module, 'facet_collection_field_facet_groups', $field_info);
          if (!empty($facet_groups)) {
            foreach ($facet_groups as $facet_group => $field_facets) {
              if (!isset($facet_collection[$field_type][$facet_group])) {
                $facet_collection[$field_type][$facet_group] = array();
              }
              foreach ($field_facets as $field_facet_name => $field_facet) {
                if (!in_array($field_facet_name, $facet_collection[$field_type][$facet_group])) {
                  $facet_collection[$field_type][$facet_group][$field_name][] = $field_facet_name;
                }
              }
              $facets = array_merge($facets, $field_facets);
            }
          }
        }
      }
    }
  }

  //Contains facet names for each groups and for each field type
  variable_set('facet_collection:facet_collection', $facet_collection);

  //Contains module names that should handle field type using facets
  variable_set('facet_collection:field_type_facet_list', $field_type_facet_list);

  //Contatns module names that should handle field type using search
  variable_set('facet_collection:field_type_search_list', $field_type_search_list);

  //Contatins all facets provided facet collection module
  cache_set('facet_collection:listfacets', array_keys($facets), 'cache', CACHE_TEMPORARY);
  return $facets;
}

/**
 * Return json decoded filter settings
 */
function facet_collection_get_filter_settings() {
  $filter_settings = & drupal_static(__FUNCTION__);
  if (!isset($filter_settings)) {
    $filter_settings = drupal_json_decode(variable_get('facet_collection_filters_settings'));
  }
  return $filter_settings;
}

/**
 * Implements altering of resuts to provide proper links to the nodes
 * We should provide search key word for flexpaper highlighting
 */
function facet_collection_apachesolr_process_results(&$results, DrupalSolrQueryInterface $query) {
  if (arg(0) == 'library') {
    global $base_url;
    // Find curr content type.
    $filter_content_type = facet_collection_get_filtered_content_type();
    $searcher = $query->getSearcher();
    $response = apachesolr_static_response_cache($searcher);
    $numfound = $response->response->numFound;
    $get_params['numFound'] = $numfound;
    $get_params['collection'] = 'true';
    $arg = arg(1);
    if (!empty($arg)) {
      $get_params['query'] = $arg;
    }
    $start = $query->getParam('start');
    $result_number = count($results);
    //We need to add info about solr query id in SESSION to allow collection pager work, since it requires solr query for its work.
    $sqid = & drupal_static('faset_collection_solr_query_id');
    for ($i = 0; $i < $result_number; $i++) {
      $link = $results[$i]['link'];
      $path = str_replace($base_url . '/', '', $link);
      $get_params['curr'] = $start + $i;
      if (!empty($sqid)) {
        $get_params['sqid'] = $sqid;
      }
      // We also need to save facet filters in url.
      if (isset($_GET['f'])) {
        $get_params['f'] = $_GET['f'];
      }
      $options = array(
        'query' => $get_params
      );
      $link = url($path, $options);
      $results[$i]['link'] = $link;
    }
  }
}

/**
 * Implements hook_theme()
 */
function facet_collection_theme() {
  return array(
    'facet_collection_search_results' => array(
      'variables' => array(
        'results' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for default presentation of search results
 */
function theme_facet_collection_search_results($vars) {
  $results = $vars['results'];
  $build['search_results'] = array(
    '#theme' => 'search_results',
    '#results' => $results,
    '#module' => 'facet_collection'
  );
  return $build;
}

/**
 * Implements hook_entity_info_alter()
 * We need it for adding additional node view mode 'collection teaser'
 */
function facet_collection_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'] += array(
    'collection_teaser' => array(
      'label' => t('Collection teaser'),
      'custom settings' => TRUE,
    ),
    'collection_thumbnail' => array(
      'label' => t('Collection thumbnail'),
      'custom settings' => TRUE,
    ),
  );
}

