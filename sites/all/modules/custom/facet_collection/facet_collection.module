<?php

/**
 * Implements hook_hook_info()
 */
function facet_collection_hook_info() {
    $hooks = array(
        'facet_collection_field_type_info' => array(
            'group' => 'facet_collection',
        ),
        'facet_collection_field_facet_groups' => array(
            'group' => 'facet_collection',
        ),
        'facet_collection_index_field' => array(
            'group' => 'facet_collection'
        ),
        'facet_collection_facet_content_types' => array(
            'group' => 'facet_collection'
        )
    );
}

/**
 * Implements hook_menu()
 */
function facet_collection_menu() {
    $items['collection'] = array(
        'title' => t('Collection'),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'facet_collection_page',
        'page arguments' => array(),
        'access arguments' => array('search content'),
    );
    return $items;
}

/**
 * Page callback for collection
 */
function facet_collection_page() {
    $build = array();
    $environment = apachesolr_default_environment();
    $solr = apachesolr_get_solr($environment);
    $params = facet_collection_get_params();
    $base_path = arg(0);
    $results = apachesolr_search_run('apachesolr', $params, '', $base_path, pager_find_page(), $solr);
    $build['search_results'] = array(
        '#theme' => 'search_results',
        '#results' => $results,
        '#module' => 'facet_collection'
    );
    return $build;
}

/**
 * Get all params to make solr query
 */
function facet_collection_get_params() {
//We use lucene type here because we make specific query that return only documents corresponds to entity type node;
    $params = array();
    $q = arg(1);
    if (empty($q)) {
        $params['q'] = 'entity_type:node';
    } else {
        $params['q'] = $q;
    }
    $params['defType'] = 'lucene';
    $params['spellcheck'] = FALSE;
    return $params;
}

/**
 * Implements hook_block_info()
 */
function facet_collection_block_info() {
    $blocks['content_types_selection'] = array(
        'info' => t('Filters for nodes')
    );
    return $blocks;
}

/*
 * Implements hook_block_view()
 */

function facet_collection_block_view($delta) {

//We need to collect all facetapi presentations for separate block in one
//and add titles for each facet.
    $realm_name = 'block';
    $content = array();
    if ($delta == 'content_types_selection') {
//We need searcher for further actions.
        $searcher_info = facetapi_get_searcher_info();
        $searcher = array_shift(array_keys($searcher_info));

//Get adapter and build block realm to grab all build information
        $adapter = facetapi_adapter_load($searcher);

//We should check facets visibility.
        if (!cache_get('facet_collection:visibility')) {
            facet_collection_set_facets_visibility($adapter, $realm_name, $searcher);
        }

//Get filter settings
        $filter_settings = drupal_json_decode(variable_get('facet_collection_filters_settings'));

//Get all facets that can be shown because we need only facets that satisfy all chosen content types.

        $available_facets = facet_collection_get_available_facets($filter_settings);

//Build content using facetapi block presentation for each facet
        $enabled_facets = $adapter->getEnabledFacets();
        $builds = facetapi_build_realm($searcher, $realm_name);
        foreach ($builds as $facet_name => $build) {
            if (is_array($build) && !empty($available_facets)) {
                if (in_array($facet_name, $available_facets)) {
                    $field_alias = $enabled_facets[$facet_name]['field alias'];
                    $title = $build['#title'];
                    $build[$field_alias]['#title'] = $title;
                    $content[] = $build;
                }
            }
        }
    }

    return array(
        'subject' => t('Filters'),
        'content' => $content,
    );
}

/**
 * Set collection fasets visibility and make record in database
 */
function facet_collection_set_facets_visibility($adapter, $realm_name, $searcher) {
    $realm = facetapi_realm_load($realm_name);
    $data = cache_get('facet_collection:listfacets');
    $facet_list = $data->data;
    foreach ($facet_list as $faset_name) {
        $faset = facetapi_facet_load($faset_name, $searcher);
        facetapi_save_facet_enabled($adapter, $realm, $faset);
    }
    cache_set('facet_collection:visibility', TRUE, 'cache', CACHE_TEMPORARY);
}

/**
 * Filter facet list to show only facets that satisfy all chosen content types
 */
function facet_collection_get_available_facets($filter_settings) {
    $available_facets = array();
    $field_type_list = variable_get('facet_collection:field_type_list');
    $facet_collection = variable_get('facet_collection:facet_collection');

//Get all facets for collection from cache
    $data = cache_get('facet_collection:listfacets');
    $facet_list = $data->data;

//@todo Get it from settings.
    $content_types = array('files', 'location', 'people');

//By defaults all content types are shown. If we take content type filters the list of content types will be changed.
    $content_types_by_filters = FALSE;
    if (isset($_GET['f'])) {

//Check if there are some filters and if it's true check if this filters are content type filters.
        $filters = $_GET['f'];
        foreach ($filters as $filter) {
            $arr = explode(':', $filter);
            if ($arr[0] == 'bundle') {

//List of content types will consist on all chosen content types.
                if ($content_types_by_filters == FALSE) {
                    $content_types = array();
                }
                $content_types_by_filters = TRUE;
                if ($content_types_by_filters == TRUE) {
                    $content_types[] = $arr[1];
                }
            }
        }
    }

//Perform comparison with content type list of each facet.
//If it is satisfy all chosen  content types we take this facet
    $searcher_info = facetapi_get_searcher_info();
    $searcher = array_shift(array_keys($searcher_info));
    foreach ($facet_collection as $field_type => $facet_groups) {
        foreach ($facet_groups as $facet_group => $facet_names) {
            foreach ($facet_names as $facet_name) {
                if (isset($field_type_list[$field_type])) {
                    $modules = $field_type_list[$field_type];
                    foreach ($modules as $module) {
                        $facet_content_types_array = module_invoke($module, 'facet_collection_facet_content_types', $filter_settings, $facet_group, $facet_name, $searcher);
                    }
                }
                $array_diff = array_diff($content_types, $facet_content_types_array);
                if (empty($array_diff)) {
                    $available_facets[] = $facet_name;
                }
            }
        }
    }
    return $available_facets;
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE()
 */
function facet_collection_apachesolr_index_document_build_node($filedocument, $node, $env_id) {
    $field_type_list = variable_get('facet_collection:field_type_list');
    $node_instances = field_info_instances('node', $node->type);
    foreach ($node_instances as $instance) {
        $field_info = field_info_field($instance['field_name']);
        $field_type = $field_info['type'];
        if (isset($field_type_list[$field_type])) {
            $modules = $field_type_list[$field_type];
            foreach ($modules as $module) {
                $filedocument = module_invoke($module, 'facet_collection_index_field', $filedocument, $node, $field_info);
            }
        }
    }
    $documents = array();
    $documents[] = $filedocument;
    return $documents;
}

/**
 * Implements hook_facetapi_facet_info()
 */
function facet_collection_facetapi_facet_info($searcher_info) {
    $facets = array();
    $field_type_list = array();
    $facet_collection = array();

    //Get information about all field types that should be filtered and modules
    foreach (module_implements('facet_collection_field_type_info') as $module) {
        $field_types = module_invoke($module, 'facet_collection_field_type_info');
        foreach ($field_types as $field_type) {
            $field_type_list[$field_type][] = $module;
        }
    }

    //Get facets and facet groups for each field according
    $fields = field_info_fields();
    foreach ($fields as $field_info) {
        $field_type = $field_info['type'];
        if (isset($field_type_list[$field_type])) {
            $modules = $field_type_list[$field_type];
            foreach ($modules as $module) {
                $facet_groups = module_invoke($module, 'facet_collection_field_facet_groups', $field_info);
                if (!empty($facet_groups)) {
                    foreach ($facet_groups as $facet_group => $field_facets) {
                        if (!isset($facet_collection[$field_type][$facet_group])) {
                            $facet_collection[$field_type][$facet_group] = array();
                        }
                        foreach ($field_facets as $field_facet_name => $field_facet) {
                            if (!in_array($field_facet_name, $facet_collection[$field_type][$facet_group])) {
                                $facet_collection[$field_type][$facet_group][] = $field_facet_name;
                            }
                        }
                        $facets = array_merge($facets, $field_facets);
                    }
                }
            }
        }
    }
    variable_set('facet_collection:facet_collection', $facet_collection);
    variable_set('facet_collection:field_type_list', $field_type_list);
    cache_set('facet_collection:listfacets', array_keys($facets), 'cache', CACHE_TEMPORARY);
    return $facets;
}

/**
 * Implements altering of resuts to provide proper links to the nodes
 * We should provide search key word for flexpaper highlighting
 */
function facet_collection_apachesolr_process_results(&$results, DrupalSolrQueryInterface $query) {
    global $base_url;
    $q = $query->getParam('q');
    $searcher = $query->getSearcher();
    $response = apachesolr_static_response_cache($searcher);
    $numfound = $response->response->numFound;
    $get_params = array_diff_key($_GET, array('q' => 1, 'page' => 1, 'solrsort' => 1, 'retain-filters' => 1));
    $get_params['collection'] = 'true';
    $get_params['numFound'] = $numfound;
    $get_params['query'] = $q;
    $start = $query->getParam('start');
    $result_number = count($results);
    for ($i = 0; $i < $result_number; $i++) {
        $link = $results[$i]['link'];
        $path = str_replace($base_url . '/', '', $link);
        $get_params['curr'] = $start + $i;
        $options = array(
            'query' => $get_params
        );
        $link = url($path, $options);
        $results[$i]['link'] = $link;
    }
}

/**
 * Implements hook_theme()
 */
function facet_collection_theme() {
    return array(
        'apachesolr_search_snippets__node' => array(
            'template' => 'facet-collection-snippet',
            'variables' => array('doc' => NULL, 'snippets' => array()),
        ),
    );
}

/**
 * Process variables for facet-collection-snippet.tpl.php.
 */
function template_preprocess_apachesolr_search_snippets__node(&$variables) {
    $module_path = drupal_get_path('module', 'facet_collection');
    drupal_add_css($module_path . '/CSS/facet_collection_snippet.css');
    global $base_url;
    $nid = $variables['doc']->entity_id;
    $node = node_load($nid);
    $instances = field_info_instances('node', $node->type);
    if (isset($instances['body'])) {
        $items = field_get_items('node', $node, 'body');
        if (!empty($items)) {
            foreach ($items as $item) {
                $text = $item['value'];
                $variables['text'] = $text;
            }
        }
    }
    foreach ($instances as $field_name => $instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'image') {
            $items = field_get_items('node', $node, $field_info['field_name']);
            if (!empty($items)) {
                foreach ($items as $item) {
                    $uri = $item['uri'];
                    $style = 'thumbnail';
                    $styles = image_styles();
                    if (in_array($style, array_keys($styles))) {
                        $image_path = image_style_url($style, $uri);
                    }else{
                        $image_path = file_create_url($uri);
                    }
                    $variables['image_path'] = $image_path;
                    break;
                }
            }
        }
    }
}

/**
 * Implements hook_apachesolr_query_alter()
 */
function facet_collection_apachesolr_query_alter($query) {

    //We should check that only nodes should be shown
    if (arg(0) == 'collection') {
        $fq = $query->getParam('fq');
        $fq = array_merge($fq, array('entity_type:node'));
        $query->addParam('fq', $fq);
    }
}