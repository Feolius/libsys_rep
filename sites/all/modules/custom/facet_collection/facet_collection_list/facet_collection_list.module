<?php

/**
 * Implements hook_facet_collection_field_type_info()
 */
function facet_collection_list_facet_collection_field_type_info() {
  return array('facet' => array('list_integer', 'list_float', 'list_text', 'list_boolean'));
}

/**
 * Implements hook_facet_collection_field_facet_groups()
 */
function facet_collection_list_facet_collection_field_facet_groups($field_info) {
  $facet_groups['default'] = array();
  $facets = array();
  if (isset($field_info['bundles']['node'])) {
    $bundle = $field_info['bundles']['node'][0];
  } else {
    return array();
  }
  $field_name = $field_info['field_name'];
  $query_types = array('term');
  $default_widget = 'facetapi_links';
  $facet_name = 'collection_' . $field_name;
  $instance = field_info_instance('node', $field_name, $bundle);
  $label = $instance['label'];
  $index_field_name = 'sm_' . $field_name;
  $map_options = array();

  $facets[$facet_name] = array(
    'name' => $facet_name,
    'label' => t($label),
    'description' => t('Automatically created facet for facet collection module'),
    'field' => $index_field_name,
    'field alias' => $index_field_name,
    'field api name' => $field_name,
    'field api bundles' => array(),
    'query types' => $query_types,
    'default widget' => $default_widget,
    'allowed operators' => array(FACETAPI_OPERATOR_AND => FALSE, FACETAPI_OPERATOR_OR => TRUE),
    'facet mincount allowed' => TRUE,
    'facet missing allowed' => TRUE,
    'map callback' => FALSE,
    'map options' => $map_options,
    'min callback' => FALSE,
    'max callback' => FALSE,
  );
  $facet_groups['default'] = $facets;
  return $facet_groups;
}

/**
 * Implements hook_facet_collection_index_field()
 */
function facet_collection_list_facet_collection_index_field($filedocument, $node, $field_info) {
  $field_name = $field_info['field_name'];
  $items = field_get_items('node', $node, $field_name);
  $index_field_name = 'sm_' . $field_name;
  if (!empty($items)) {
    foreach ($items as $item){
      $filedocument->setMultiValue($index_field_name, $item['value']);
    }
  }
  return $filedocument;
}

/**
 * Implements hook_facet_collection_facet_content_types()
 */
function facet_collection_list_facet_collection_facet_content_types($filter_settings, $facet_group, $facet_name, $searcher) {
  $facet_content_types_array = array();
  $facet = facetapi_facet_load($facet_name, $searcher);
  $field_name = $facet['field api name'];
  $field_info = field_info_field($field_name);
  if (isset($filter_settings[$field_info['type']][$field_name])) {
    $facet_content_types_array = array($filter_settings[$field_info['type']][$field_name]);
  }
  return $facet_content_types_array;
}