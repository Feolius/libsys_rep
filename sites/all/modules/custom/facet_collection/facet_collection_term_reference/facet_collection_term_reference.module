<?php

/**
 * Implements hook_facet_collection_field_type_info()
 */
function facet_collection_term_reference_facet_collection_field_type_info() {
  return array('facet' => array('taxonomy_term_reference'));
}

/**
 * Implements hook_facet_collection_field_facet_groups()
 */
function facet_collection_term_reference_facet_collection_field_facet_groups($field_info) {
  $facet_groups = array();
  $facet_groups['default'] = array();
  $facets = array();
  $field_name = $field_info['field_name'];
  $map_callback = FALSE;
  $map_options = $field_info;
  $min_callback = FALSE;
  $max_callback = FALSE;
  $query_types = array('term');
  if (module_exists('facetapi_library_term_widget')) {
    $default_widget = 'facetapi_library_term_widget';
  }
  else {
    $default_widget = 'facetapi_links';
  }
  $voc_machine_name = $field_info['settings']['allowed_values'][0]['vocabulary'];
  if (empty($voc_machine_name)) {
    return $facet_groups['default'];
  }
  $vocabulary = taxonomy_vocabulary_machine_name_load($voc_machine_name);
  $facet_name = 'collection_' . $voc_machine_name;
  $label = $vocabulary->name;
  $index_field_name = facet_collection_get_fieldname_by_vocabulary($voc_machine_name);
  $map_callback = 'facet_collection_map_taxonomy_terms';
  $map_options = array();
  $facets[$facet_name] = array(
    'name' => $facet_name,
    'label' => t($label),
    'description' => t('Automatically created facet for facet collection module'),
    'field' => $index_field_name,
    'field alias' => $index_field_name,
    'field api name' => $field_name,
    'field api bundles' => array(),
    'query types' => $query_types,
    'default widget' => $default_widget,
    'allowed operators' => array(FACETAPI_OPERATOR_AND => FALSE, FACETAPI_OPERATOR_OR => TRUE),
    'facet mincount allowed' => TRUE,
    'facet missing allowed' => TRUE,
    'map callback' => $map_callback,
    'map options' => $map_options,
    'min callback' => $min_callback,
    'max callback' => $max_callback,
  );
  $facet_groups['default'] = $facets;
  return $facet_groups;
}

/**
 * Implements hook_facet_collection_index_field()
 */
function facet_collection_term_reference_facet_collection_index_field($filedocument, $node, $field_info) {
  $field_name = $field_info['field_name'];
  if (isset($field_info['settings']['allowed_values'])) {
    $items = field_get_items('node', $node, $field_name);
    if (!empty($items)) {
      foreach ($field_info['settings']['allowed_values'] as $vocabulary) {
        $voc_name = $vocabulary['vocabulary'];
      }
      $index_field_name = facet_collection_get_fieldname_by_vocabulary($voc_name);
      foreach ($items as $item) {
        $filedocument->setMultiValue($index_field_name, $item['tid']);
      }
    }
  }
  return $filedocument;
}

/**
 * Get unique field name by vocabulary name
 */
function facet_collection_get_fieldname_by_vocabulary($voc_name) {
  return 'im_' . $voc_name;
}

/**
 * Implements hook_facet_collection_facet_content_types()
 */
function facet_collection_term_reference_facet_collection_facet_content_types($filter_settings, $facet_group, $facet_name, $searcher) {
  $facet_content_types_array = array();
  $facet = facetapi_facet_load($facet_name, $searcher);
  $facet_field_info = field_info_field($facet['field api name']);
  $voc_machine_name = $facet_field_info['settings']['allowed_values'][0]['vocabulary'];
  if (isset($filter_settings['taxonomy_term_reference'][$voc_machine_name])) {
    $facet_content_types_array = array_keys($filter_settings['taxonomy_term_reference'][$voc_machine_name]);
  }

  return $facet_content_types_array;
}

/**
 * Map callback for taxonomy term facet
 */
function facet_collection_map_taxonomy_terms($variables) {
  $map = array();
  foreach ($variables as $tid) {
    $term = taxonomy_term_load($tid);
    $map[$tid] = entity_label('taxonomy_term', $term);
  }
  return $map;
}