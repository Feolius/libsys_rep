<?php

const ROUNDING_FOR_YEARS = 1;
const ROUNDING_FOR_MONTH = 2;
const NO_ROUNDING = 3;

/**
 * @file
 * Field hooks to implement a approximate date field.
 */

/**
 * Implements hook_field_info().
 */
function approximate_date_field_info() {

  $settings = array(
    'todate' => '',
    'granularity' => drupal_map_assoc(array('year', 'month', 'day')),
    'tz_handling' => 'site',
    'timezone_db' => 'UTC',
  );
  $instance_settings = array(
    'default_value' => 'now',
    'default_value2' => 'same',
    'rounding' => '',
    'rounding2' => '',
  );

  return array(
    'approximate_date' => array(
      'label' => t('Approximate date'),
      'description' => t('This field to display approximate time for some events.'),
      'default_widget' => 'approximate_date_text',
      'default_formatter' => 'approximate_date_default',
      'settings' => $settings,
      '$instance_settings' => $instance_settings,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function approximate_date_field_is_empty($item, $field) {
  if ($field['type'] == 'approximate_date') {
    if (empty($item['value'])) {
      return TRUE;
    }
    elseif ($field['settings']['todate'] == 'required' && empty($item['value2'])) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function approximate_date_field_widget_info() {
  $settings = array(
    'settings' => array(
      'input_format' => date_default_format('date_select'),
      'input_format_custom' => '',
      'increment' => 15,
      'text_parts' => array(),
      'year_range' => '-3:+3',
      'label_position' => 'above',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );

  $info = array(
    'approximate_date_text' => array(
      'label' =>  t('Approximate date widget'),
      'field types' => array('approximate_date'),
    ) + $settings,
  );
  // The date text widget should use an increment of 1.
  $info['approximate_date_text']['increment'] = 1;

  return $info;
}

/**
 * Implements hook_field_widget_form().
 */
function approximate_date_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $item, $delta, $element) {

  if ($instance['widget']['type'] == 'approximate_date_text') {
    $element['value'] = array(
      '#type' => 'textfield',
      '#title' => t($instance['label']),
      '#default_value' => isset($item[$delta]['value']) ? approximate_date_return_date($item[$delta]) : NULL,
      '#element_validate' => array('_approximate_date_value_validate'),
      '#required' => $instance['required'],
      '#date_label_position' => $instance['widget']['settings']['label_position'],
    );
    $element['value2'] = array(
      '#type' => (!empty($field['settings']['todate'])) ? 'textfield' : 'hidden',
      '#title' => t($instance['label']),
      '#default_value' => isset($item[$delta]['value2']) ? approximate_date_return_date($item[$delta]) : NULL,
      '#element_validate' => array('_approximate_date_value_validate'),
      '#required' => $instance['required'],
      '#date_label_position' => $instance['widget']['settings']['label_position'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function approximate_date_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['label_position'] = array(
    '#type' => 'value',
    '#value' => $settings['label_position'],
  );
  $form['text_parts'] = array(
    '#type' => 'value',
    '#value' => $settings['text_parts'],
  );

  $text_parts = (array) $settings['text_parts'];
  foreach (date_granularity_names() as $key => $value) {
    if ($widget['type'] == 'date_select') {
      $form['advanced']['text_parts'][$key] = array(
        '#type' => 'radios',
        '#default_value' => in_array($key, $text_parts) ? 1 : 0,
        '#options' => array(0 => '', 1 => ''),
      );
    }
    else {
      $form['advanced']['text_parts'][$key] = array(
        '#type' => 'value',
        '#value' => (int) in_array($key, (array) $settings['text_parts']),
      );
    }
  }

  $context = array(
    'field' => $field,
    'instance' => $instance,
  );
  drupal_alter('date_field_widget_settings_form', $form, $context);

  return $form;
}

/**
 * Implements hook_field_settings_form().
 */
function approximate_date_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $tz_handling = $settings['tz_handling'];

  $description = t('End dates are used to collect duration. E.g., allow an event to start on September 15, and end on September 16.');
  $form['enddate_get'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect an end date'),
    '#description' => $description,
    '#default_value' => (empty($settings['todate']) ? FALSE : TRUE),
    '#disabled' => $has_data,
  );
  $form['enddate_required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => ((isset($settings['todate']) && $settings['todate'] === 'required') ? TRUE : FALSE),
    '#disabled' => $has_data,
    '#states' => array(
      'invisible' => array(
        'input[name="field[settings][enddate_get]"]' => array('checked' => FALSE),
      ),
    ),
  );

  // Force this value to hidden because we don't want to allow it to be changed
  // right now, but allow it to be a variable if needed.
  $form['timezone_db'] = array(
    '#type' => 'hidden',
    '#value' => date_get_timezone_db($tz_handling),
  );

  $context = array(
    'field' => $field,
    'instance' => $instance,
    'has_data' => $has_data,
  );
  drupal_alter('date_field_settings_form', $form, $context);

  return $form;
}

/**
 * Validation callback for approximate time value.
 */
function _approximate_date_value_validate($element, &$form_state, $form) {
  $value = !empty($element['#value']) ? $element['#value'] : $element['#default_value'];
  if (empty($value) && $element['#required'] == TRUE) {
    return form_get_form($form);
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_field_presave().
 */
function approximate_date_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (empty($items)) {
    return;
  }

  $field_name = $field['field_name'];
  $settings = $field['settings'];
  $process = date_process_values($field);

  foreach ($items as $delta => $item) {
    foreach ($process as $processed) {
      $timezone = isset($item['timezone']) ? $item['timezone'] : '';
      if (is_array($item)) {kpr($item);
        $date = approximate_date_set_date($item[$processed]);
        $items[$delta][$processed] = ($date) ? $date['date'] : '';
        $items[$delta]['timezone'] = date_get_timezone($settings['tz_handling'], $timezone);
        $items[$delta]['timezone_db'] = date_get_timezone_db($settings['tz_handling']);
        $items[$delta]['rounding'] = ($date) ? $date['rounding'] : '';
      }
    }
  }
  $entity->{$field_name}[$langcode] = $items;
}

/**
 * Implements hook_field_validate().
 */
function approximate_date_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_insert().
 */
function approximate_date_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $context = array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'field' => $field,
    'instance' => $instance,
    'langcode' => $langcode,
  );
  drupal_alter('approximate_date_insert', $items, $context);
}

/**
 * Implements hook_field_update().
 */
function approximate_date_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $context = array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'field' => $field,
    'instance' => $instance,
    'langcode' => $langcode,
  );
  drupal_alter('approximate_date_update', $items, $context);
}

/**
 * Implements hook_field_load().
 */
function approximate_date_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
  $process = date_process_values($field);
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => &$item) {

      // If the file does not exist, mark the entire item as empty.
      if (is_array($item)) {
        $timezone = isset($item['timezone']) ? $item['timezone'] : '';
        $item['timezone'] = date_get_timezone($field['settings']['tz_handling'], $timezone);
        $item['timezone_db'] = $timezone_db;
        $date = approximate_date_get_date($item);
        $item['value'] = $date;
        if ($field['settings']['todate'] == TRUE) {
          if (!empty($item['value']) && empty($item['value2'])) {
            $item['value2'] = $item['value'];
          }
        }
      }
    }
  }
}

/**
 * Function for set date.
 */
function approximate_date_set_date($item) {
  if (empty($item)) {
    return;
  }
  else {
    $values = explode('/', $item);
    $rounding = sizeof($values);

    if ($rounding == ROUNDING_FOR_YEARS) {
      array_unshift($values, '01', '01');
      $item = implode('/', $values);
    }
    elseif ($rounding == ROUNDING_FOR_MONTH) {
      array_unshift($values, '01');
      $item = implode('/', $values);
    }

    // Creating date;
    $value = date('d/m/y', strtotime($item));
    $date = new DateObject($value);
    $timestamp = date_timestamp_get($date);
    $output = array(
      'date' => $timestamp,
      'rounding' => $rounding,
    );
    return $output;
  }
}

/**
 * Function for set date.
 */
function approximate_date_get_date($item) {
  if (empty($item)) {
    return;
  }
  else {
    if ($item['rounding'] == ROUNDING_FOR_MONTH) {
      $output = date("F/Y", $item['value']);
    }
    elseif ($item['rounding'] == ROUNDING_FOR_YEARS) {
      $output = date("Y", $item['value']);
    }
    else {
      $output = date("d/F/Y", $item['value']);
    }
    return $output;
  }
}

/**
 * Function for return approximate date.
 */
function approximate_date_return_date($item) {
  if (empty($item)) {
    return;
  }
  else {
    if ($item['rounding'] == ROUNDING_FOR_MONTH) {
      $date = new DateObject(date('m/Y', strtotime($item['value'])));
      $timestamp = date_timestamp_get($date);
      kpr($date);
      $output = date("m/Y", $timestamp);
    }
    elseif($item['rounding'] == ROUNDING_FOR_YEARS) {
      $date = new DateObject(date('Y', strtotime($item['value'])));
      $timestamp = date_timestamp_get($date);
      $output = date("Y", $timestamp);
    }
    else {
      $date = new DateObject(date('d/m/Y', strtotime($item['value'])));
      $timestamp = date_timestamp_get($date);
      $output = date("d/m/Y", $timestamp);
    }
    return $output;
  }
}
