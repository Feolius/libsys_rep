<?php

/**
 * Implements hook_field_info().
 */
function approximate_date_field_info() {

    $settings = array(
        'settings' => array(
            'todate' => '',
            'granularity' => drupal_map_assoc(array('year', 'month', 'day', 'hour', 'minute')),
            'tz_handling' => 'site',
            'timezone_db' => 'UTC',
        ),
        'instance_settings' => array(
            'default_value' => 'now',
            'default_value_code' => '',
            'default_value2' => 'same',
            'default_value_code2' => '',
        ),
        'property_type' => '',
    );

  return array(
     '' => array(
        'label' => t('Approximate date'),
        'description' => t('This field to display approximate date for some events.'),
        'default_widget' => 'date_text',
        'default_formatter' => '_default',
      ) + $settings,
  );
}

/**
 * Implements hook_field_is_empty().
 */
function approximate_date_field_is_empty($item, $field) {
    if ($field['type'] == '') {
        if (empty($item['value'])) {
            return TRUE;
        }
        elseif ($field['settings']['todate'] == 'required' && empty($item['value2'])) {
            return TRUE;
        }
        return FALSE;
    }
}

/**
 * Implements hook_field_widget_info().
 */
function approximate_date_field_widget_info() {
    $settings = array(
        'settings' => array(
            'input_format' => date_default_format('data_select'),
            'input_format_custom' => '',
            'increment' => 15,
            'text_parts' => array(),
            'year_range' => '-3:+3',
            'label_position' => 'above',
        ),
        'behaviors' => array(
            'multiple values' => FIELD_BEHAVIOR_DEFAULT,
            'default value' => FIELD_BEHAVIOR_NONE,
        ),
    );

    $info = array(
        '_text' => array(
            'label' =>  t('Text field'),
            'field types' => array(''),
        ) + $settings,
    );

    // The date text widget should use an increment of 1.
    $info['date_text']['increment'] = 1;

    return $info;
}

/**
 * Implements hook_field_widget_form().
 */
function approximate_date_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $item, $delta, $element) {
  if ($instance['widget']['type'] == '_text') {
    $element['value'] = array(
      '#type' => 'textfield',
      '#title' => t('ff'),
      '#dafault_value' => isset($item['delta']['value']) ? $item['delta']['value'] : NULL,
      '#element_validete' => array('__value_validate'),
    );
  }
  return $element;
}

/**
 * Validation callback for approximate time value.
 */
function _approximate_date_value_validate($element, &$form_state, $form) {
  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function approximate_date_field_formatter_info() {
    $formatters = array(
        '_default' => array(
            'label' => t('Approximate date and time'),
            'field types' => array(''),
            'settings' => array(
                'format_type' => 'long',
                'multiple_number' => '',
                'multiple_from' => '',
                'multiple_to' => '',
                'fromto' => 'both',
            ),
        ),
    );
    return $formatters;
}

/**
* Implements hook_field_formatter_settings_form().
 */
function approximate_date_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $form = array();
    $form['format_type'] = array(
        '#title' => t('Choose how users view dates and times:'),
        '#type' => 'select',
        '#options' => date_format_type_options(),
        '#default_value' => $settings['format_type'],
        '#description' => t('To add or edit options, visit <a href="@date-time-page">Date and time settings</a>.', array('@date-time-page' => url('admin/config/regional/date-time'))),
        '#weight' => 0,
    );
    return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function approximate_date_field_formatter_settings_summary($field, $instance, $view_mode) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $format_types = date_format_type_options();
    $formatter = $display['type'];
    $summary = [];
    $format = FALSE;
    switch ($formatter) {
        case 'date_plain':
            $format = t('Plain');
            break;
        case 'format_interval':
            $format = t('Interval');
            break;
        default:
            if (!empty($format_types[$settings['format_type']])) {
                $format = $format_types[$settings['format_type']];
            }
    }
    if ($format) {
        $summary = t('Display dates using the @format format', array('@format' => $format));
    }
    return $summary;
}

/**
 * Implements hook_field_presave().
 */
function approximate_date_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
    if (empty($items)) {
        return;
    }

    $field_name = $field['field_name'];
    $settings = $field['settings'];

    foreach ($items as $delta => $item) {
        $timezone = isset($item['timezone']) ? $item['timezone'] : '';
        if (is_array($item)) {
            $items[$delta]['timezone'] = date_get_timezone($settings['tz_handling'], $timezone);
            $items[$delta]['timezone_db'] = date_get_timezone_db($settings['tz_handling']);
        }
    }
    $entity->{$field_name}[$langcode] = $items;
}

/**
 * Implements hook_field_validate().
 */
function approximate_date_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
      $settings = $field['settings'];
    $flexible = 0;
        if (!form_get_errors()) {
            foreach ($items as $delta => $item) {
                if (is_array($item) && isset($item['value'])) {
                    $timezone = isset($item['timezone']) ? $item['timezone'] : '';
                    $process = date_process_values($field, $instance);
                    $date1 = new DateObject($item['value'], date_get_timezone($settings['tz_handling'], $timezone), date_type_format($field['type']));
                    if (count($process) == 1 || (empty($item['value2']) && $item['value2'] !== 0)) {
                        $date2 = clone($date1);
                    }
                    else {
                        $date2 = new DateObject($item['value2'], $item['timezone'], date_type_format($field['type']));
                    }
                    //$valid1 = $date1->validGranularity($field['settings']['granularity'], $flexible);
                    //$valid2 = $date2->validGranularity($field['settings']['granularity'], $flexible);

                    foreach ($process as $processed) {
                        if ($processed == 'value' && $field['settings']['todate'] /*&& !$valid1 && $valid2*/) {
                        $errors[$field['field_name']][$langcode][$delta][] = array(
                            'error' => 'value',
                            'message' => t("A 'Start date' date is required for field %field #%delta.", array('%delta' => $field['cardinality'] ? intval($delta + 1) : '', '%field' => $instance['label'])),
                        );
                    }
                    if ($processed == 'value2' && $field['settings']['todate'] == 'required' && ($instance['required']/* && $valid1 && !$valid2)*/)) {
                        $errors[$field['field_name']][$langcode][$delta][] = array(
                            'error' => 'value2',
                            'message' => t("An 'End date' is required for field %field #%delta.", array('%delta' => $field['cardinality'] ? intval($delta + 1) : '', '%field' => $instance['label'])),
                        );
                    }
                }
            }
        }
    }

}

/**
 * Implements hook_field_insert().
 */
function approximate_date_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
    $context = array(
        'entity_type' => $entity_type,
        'entity' => $entity,
        'field' => $field,
        'instance' => $instance,
        'langcode' => $langcode,
    );
    drupal_alter('_field_insert', $items, $context);
}

/**
 * Implements hook_field_update().
 */
function approximate_date_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
    $context = array(
        'entity_type' => $entity_type,
        'entity' => $entity,
        'field' => $field,
        'instance' => $instance,
        'langcode' => $langcode,
    );
    drupal_alter('_field_update', $items, $context);
}

/**
 * Implements hook_field_instance_settings_form().
 *
 * Wrapper functions for date administration, included only when processing
 * field settings.
 */
function approximate_date_field_instance_settings_form($field, $instance) {
    module_load_include('inc', 'date', 'date_admin');
    return _date_field_instance_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function approximate_date_field_widget_settings_form($field, $instance) {
    module_load_include('inc', 'date', 'date_admin');
    return _date_field_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_settings_form().
 */
function approximate_date_field_settings_form($field, $instance, $has_data) {
    module_load_include('inc', 'date', 'date_admin');
    return _date_field_settings_form($field, $instance, $has_data);
}
