<?php

/**
 * Implements hook_field_widget_info().
 */
function id3_taxonomy_widget_field_widget_info() {
  return array(
    'id3_taxonomy_widget' => array(
      'label' => t('ID3 tags Taxonomy Reference metadata'),
      'description' => t('Field content is calculated from audio field in the same content type'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'audio_field' => '',
        'id3_field' => '',
        'size' => 60,
        'autocomplete_path' => 'taxonomy/autocomplete',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_id3_widget_widget_name_info().
 */
function id3_taxonomy_widget_id3_widget_widget_name_info() {
  return 'id3_taxonomy_widget';
}

/**
 * Implements hook_field_widget_info_alter().
 */
function id3_taxonomy_widget_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'taxonomy_term_reference';
  $info['options_buttons']['field types'][] = 'taxonomy_term_reference';
}

/**
 * Implements hook_options_list().
 */
function id3_taxonomy_widget_options_list($field, $instance, $entity_type, $entity) {
  $function = !empty($field['settings']['options_list_callback']) ? $field['settings']['options_list_callback'] : 'taxonomy_allowed_values';
  return $function($field);
}

/**
 * Implementation of hook_field_widget_settings_form().
 */
function id3_taxonomy_widget_field_widget_settings_form($field, $instance) {
  $form = id3_widget_widget_settings_form($field, $instance);
  $id3_fields = id3_widget_retrieve_id3_fields();
  unset($id3_fields['attached_picture']);
  $form['id3_field']['#options'] += $id3_fields;
  return $form;
}


/**
 * Implementation of hook_field_widget_form().
 */
function id3_taxonomy_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element = taxonomy_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  return $element;
}


/**
 * Implementation of  hook_id3_widget_handle_field().
 */
function id3_taxonomy_widget_id3_widget_handle_field($instance_widget_data, &$node, $field_info, &$write_back_to_audio_file_data) {
  $id3_field_name = $field_info['field_name'];
  if (isset($node->$id3_field_name)) {
    $instance_data = $node->$id3_field_name;
  }
  if (!drupal_validate_utf8($instance_widget_data['value'])) {
    $instance_widget_data = check_plain(utf8_encode($instance_widget_data['value']));
  }
  $chosen_vocabulary_name = $field_info['settings']['allowed_values'][0]['vocabulary'];
  $chosen_vocabulary = taxonomy_vocabulary_machine_name_load($chosen_vocabulary_name);

  //Check if current field already have value, i.e. user have wrote smth in this field, or not
  //If he's wrote that means the taxonomy widget already create term and all what we need to do is
  //to change parent term, which is the id3_tag_field.
  if (isset($instance_data['und'][0])) {
    if (trim($instance_data['und'][0]['name']) != $instance_widget_data['value']) {
      $term = taxonomy_term_load($instance_data['und'][0]['tid']);
      $terms = taxonomy_get_term_by_name($instance_widget_data['id3_tag_field'], $chosen_vocabulary_name);
      if (is_array($terms) && count($terms) > 0) {
        $parent_term = array_shift($terms);
      }
      else {
        $parent_term = new stdClass();
        $parent_term->vid = $chosen_vocabulary->vid;
        $parent_term->name = $instance_widget_data['id3_tag_field_name'];
        taxonomy_term_save($parent_term);
      }
      $term->parent = $parent_term->tid;
      taxonomy_term_save($term);
      $write_back_to_audio_file_data[$instance_widget_data['audio_file_id']][$instance_widget_data['id3_tag_field']][] = trim($instance_data['und'][0]['name']);
    }
  }
  //If he's not wrote, we need to fetch current id3_tag_field from audio file
  //create term with value of that id3_tag_field, or get tid of exist term with the same name
  //and write the tid of this term to node data.
  else {
    if ($instance_widget_data['value'] != NULL) {
      $terms = taxonomy_get_term_by_name($instance_widget_data['value'], $chosen_vocabulary_name);
      if (is_array($terms) && count($terms) > 0) {
        $term = array_shift($terms);
        $instance_data['und'][0]['tid'] = $term->tid;
      }
      else {
        $terms = taxonomy_get_term_by_name($instance_widget_data['id3_tag_field'], $chosen_vocabulary_name);
        if (is_array($terms) && count($terms) > 0) {
          $parent_term = array_shift($terms);
        }
        else {
          $parent_term = new stdClass();
          $parent_term->vid = $chosen_vocabulary->vid;
          $parent_term->name = $instance_widget_data['id3_tag_field'];
          taxonomy_term_save($parent_term);
        }
        $term = new stdClass();
        $term->vid = $chosen_vocabulary->vid;
        $term->name = $instance_widget_data['value'];
        $term->parent = $parent_term->tid;
        taxonomy_term_save($term);
        if (isset($term->tid)) {
          $instance_data['und'][0]['tid'] = $term->tid;
        }
      }
    }
  }
  $node->$id3_field_name = $instance_data;
}
