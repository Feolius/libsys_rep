<?php

/**
 * The main form for id3 widgets
 *
 * @param $field
 * @param $instance
 * @return array
 */
function id3_widget_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $form = array();
  $id3_fields = _id3_widget_retrieve_id3_fields($field);
  $default_id3_value = _id3_widget_retrieve_id3_field_default_value($widget, $id3_fields);
  $audio_fields = _id3_widget_retrieve_audio_field_from_bundle($instance['entity_type'], $instance['bundle']);
  $default_audio_value = _id3_widget_retrieve_audio_field_default_value($widget, $audio_fields);
  $form['audio_field'] = array(
    '#type' => 'radios',
    '#title' => t('Audio field to use to retrieve data'),
    '#description' => t('Determine the audio file used to look for ID3 metadata. If the audio field is multiple the first file will be chosen'),
    '#options' => $audio_fields,
    '#default_value' => $default_audio_value,
    '#element_validate' => array('_id3_widget_audio_field_validate'),
  );
  $form['id3_field'] = array(
    '#type' => 'select',
    '#title' => t('ID3 field data'),
    '#description' => t('These settings will automatically retrieve data from the image field referenced.'),
    '#options' => array_merge(array('default_field' => 'choose the ID3 tag field'), $id3_fields),
    '#default_value' => $default_id3_value,
    '#element_validate' => array('_id3_widget_id3_field_validate'),
  );
  return $form;
}

/**
 * Retrieve the possible id3 tag fields
 *
 * @param $field
 * @return array|mixed
 */
function _id3_widget_retrieve_id3_fields($field) {
  $id3_fields = drupal_json_decode(variable_get("id3_widget_id3v2_fields"));
  if ($field['type'] == 'image') {
    $tmp_array = array('attached_picture' => $id3_fields['attached_picture']);
    $id3_fields = $tmp_array;
  }
  else {
    unset($id3_fields['attached_picture']);
  }
  return $id3_fields;
}

/**
 * Calculate default value for settings form (more precisely audio_field setting) of widget.
 *
 * @param $widget
 * @param $audio_fields
 */
function _id3_widget_retrieve_audio_field_default_value($widget, $audio_fields) {
  $result = $widget['settings']['audio_field'];
  if (empty($result)) {
    $temp = array_keys($audio_fields);
    if (!empty($temp) && is_array($temp)) {
      $result = $temp[0];
    }
  }
  return $result;
}

/**
 * Calculate default value for settings form (more precisely id3_field setting) of widget.
 *
 * @param $widget
 * @param $id3_fields
 */
function _id3_widget_retrieve_id3_field_default_value($widget, $id3_fields) {
  $result = $widget['settings']['id3_field'];
  if (empty($result)) {
    $result = 'default_field';
  }
  return $result;
}

/**
 * Retrieve all audio fields of the same content type (bundle)
 *
 * @param $bundle_name
 */
function _id3_widget_retrieve_audio_field_from_bundle($entity_type, $bundle_name) {
  $bundle_instances = field_info_instances($entity_type, $bundle_name);
  $result = array();
  foreach ($bundle_instances as $instance_name => $instance) {
    if (is_array($instance) && is_array($instance['widget']) && $instance['widget']['type'] == 'file_generic') {
      if ($instance['settings']['file_extensions'] == 'mp3') {
        $result[$instance_name] = $instance['label'] . " (" . $instance_name . ")";
      }
    }
  }
  return $result;
}

/**
 * implementation of #element_validate FAPI Hook
 */
function _id3_widget_audio_field_validate($element, &$form_state) {
  $image_field_settings = $form_state['values']['instance']['widget']['settings']['audio_field'];
  if (empty($image_field_settings)) {
    form_error($element, t('You should choose at least one audio field to retrieve metadata.'));
  }

}

/**
 * Implementation of #element_validate FAPI Hook
 */
function _id3_widget_id3_field_validate($element, &$form_state) {
  $id3_widgets_list = cache_get('id3_widgets_list');
  if (!$id3_widgets_list) {
    $id3_widgets_list = new stdClass();
    foreach (module_implements('id3_widget_widget_name_info') as $module) {
      $id3_widget = module_invoke($module, 'id3_widget_widget_name_info');
      $widget_list[$id3_widget] = $module;
    }
    $id3_widgets_list->data = $widget_list;
    if (!empty($id3_widgets_list->data)) {
      cache_set('id3_widgets_list', $id3_widgets_list->data);
    }
  }
  //Each bundle can have only one example of any id3 tag field
  $id3_field = $form_state['values']['instance']['widget']['settings']['id3_field'];
  $current_instance = $form_state['values']['instance'];
  $instances = field_info_instances('node', $current_instance['bundle']);
  unset($instances[$current_instance['field_name']]);
  foreach ($instances as $instance) {
    if (in_array($instance['widget']['type'], array_keys($id3_widgets_list->data))) {
      $already_used_id3_field = $instance['widget']['settings']['id3_field'];
      if ($id3_field == $already_used_id3_field) {
        form_error($element, t('The field with chosen id3 tag field already exist in the content type. Please choose another id3 tag field.'));
        break;
      }
    }
  }
  if (empty($id3_field)) {
    form_error($element, t('You should choose at least one method to retrieve audio metadata.'));
  }
  if ($id3_field == 'default_field') {
    form_error($element, t('You could not choose default field. Please choose at least one method to retrieve audio metadata.'));
  }
}


function id3_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}


/**
 * Implements hook_node_presave().
 */
function id3_widget_node_presave($node) {
  $bundle_instances = field_info_instances('node', $node->type);
  dpm($node);
  // Fetch the installed id3 tags widgets.
  $id3_widgets_list = cache_get('id3_widgets_list');
  if (!$id3_widgets_list) {
    $id3_widgets_list = new stdClass();
    foreach (module_implements('id3_widget_widget_name_info') as $module) {
      $id3_widget = module_invoke($module, 'id3_widget_widget_name_info');
      $widget_list[$id3_widget] = $module;
    }
    $id3_widgets_list->data = $widget_list;
    if (!empty($id3_widgets_list->data)) {
      cache_set('id3_widgets_list', $id3_widgets_list->data);
    }
  }
  //Get the data from audio files for chosen id3 tag field
  $widget_instances = _id3_widget_search_widget_instances($node, $bundle_instances, $id3_widgets_list->data);
  $widget_instances_with_data = _id3_widget_fetch_id3_field_data($node, $widget_instances);
  //$widget_instances_with_data = _id3_widget_search_instances_with_id3_widget($node, $bundle_instances, $id3_widgets_list->data);
  $write_back_to_audio_file_data = array();
  foreach ($widget_instances_with_data as $instance_name => $instance_widget_data) {
    $field = field_info_field($instance_name);
    $function = $id3_widgets_list->data[$bundle_instances[$instance_name]['widget']['type']] . '_id3_widget_handle_field';
    if (function_exists($function)) {
      $function($instance_widget_data, $node, $field, $write_back_to_audio_file_data);
    }
  }
  if (!empty($write_back_to_audio_file_data)) {
    id3_widget_write_tags_into_file($write_back_to_audio_file_data);
  }
}

/**
 * Search in bundle for fields with id3 widgets
 * and also clean these fields if the audio field
 * have been deleted.
 *
 * @param $node
 * @param $bundle_instances
 * @param $id3_widgets_list
 * @return array
 */
function _id3_widget_search_widget_instances(&$node, $bundle_instances, $id3_widgets_list) {
  $widget_instances = array();
  foreach ($bundle_instances as $instance_name => $instance) {
    if (in_array($instance['widget']['type'], array_keys($id3_widgets_list))
      && !empty($instance['widget']['settings']['audio_field'])
      && !empty($instance['widget']['settings']['id3_field'])
    ) {
      $result[$instance_name] = NULL;
      $audio_field = $instance['widget']['settings']['audio_field'];
      $audio_field_data = $node->$audio_field;

      if (isset($audio_field_data['und'][0])) {
        $widget_instances[$instance_name] = $instance;
        $usage_list = file_usage_list(file_load($audio_field_data['und'][0]['fid']));

        if (!isset($usage_list['file']['node']) || !isset($usage_list['file']['node'][$node->vid])) {
          //Delete old data from id3 widget fields because the new audio file is uploaded
          $instance_data = $node->$instance_name;
          if (isset($instance_data['und'][0])) {
            $field_info = field_info_field($instance_name);
            switch ($field_info['type']) {
              case 'image':
                $file = file_load($instance_data['und'][0]['fid']);
                file_delete($file);
                $node->$instance_name = array('und' => array());
                break;
              case 'text':
              case 'text_long':
              case 'taxonomy_term_reference':
                $node->$instance_name = array('und' => array());
                break;
            }
          }
        }
      }
      else {
        //Delete data from id3 widget fields because the audio field is empty
        $instance_data = $node->$instance_name;
        if (isset($instance_data['und'][0])) {
          $field_info = field_info_field($instance_name);
          switch ($field_info['type']) {
            case 'image':
              $file = file_load($instance_data['und'][0]['fid']);
              file_delete($file);
              $node->$instance_name = array('und' => array());
              break;
            case 'text':
            case 'text_long':
            case 'taxonomy_term_reference':
              $node->$instance_name = array('und' => array());
              break;
          }
        }
      }
    }

  }
  return $widget_instances;
}

/**
 * Search in bundle for audio fields and metadata fields which
 * need to be filled by meta information from these audio fields
 *
 * @param $node
 * @param $widget_instances
 * @return array
 */
function _id3_widget_fetch_id3_field_data($node, $widget_instances) {
  $result = array();
  foreach ($widget_instances as $instance_name => $instance) {
    $result[$instance_name] = NULL;
    //Get id3 tag field name.
    $id3_tag_field = $instance['widget']['settings']['id3_field'];

    //Get name of audio field, from which the metadata info will be fetched
    $audio_field = $instance['widget']['settings']['audio_field'];
    $audio_field_data = $node->$audio_field;
    $audio_file_id = $audio_field_data['und'][0]['fid'];
    if (!isset($audio_files_metadata[$audio_file_id])) {
      $audio_files_metadata[$audio_file_id] = getid3_analyze(drupal_realpath(file_load($audio_file_id)->uri));
    }
    $audio_file_metadata = $audio_files_metadata[$audio_file_id];
    //Define is the needed id3 tag field set and
    //get data from from these field.
    //Also get image data of album poster if attached_picture field was chosen.
    if (isset($audio_file_metadata['tags']['id3v2']) || isset($audio_file_metadata['tags']['id3v1'])) {
      $result[$instance_name]['id3_tag_field'] = $id3_tag_field;
      $result[$instance_name]['audio_file_id'] = $audio_file_id;
      $result[$instance_name]['value'] = NULL;
      if ($id3_tag_field == 'attached_picture') {
        if (isset($audio_file_metadata['id3v2']['APIC'][0]['data'])) {
          $result[$instance_name]['value']['data'] = $audio_file_metadata['id3v2']['APIC'][0]['data'];
          $result[$instance_name]['value']['mime'] = $audio_file_metadata['id3v2']['APIC'][0]['mime'];
        }
      }
      else {
        if (isset($audio_file_metadata['tags']['id3v2'][$id3_tag_field])) {
          $result[$instance_name]['value'] = $audio_file_metadata['tags']['id3v2'][$id3_tag_field][0];
        }
        elseif (isset($audio_file_metadata['tags']['id3v1'][$id3_tag_field])) {
          $result[$instance_name]['value'] = $audio_file_metadata['tags']['id3v1'][$id3_tag_field][0];
        }
      }
    }
  }
  drupal_static('id3_widget_audio_files_metadata', $audio_files_metadata);
  return $result;
}

/**
 * Write the changed tags data back to the audio file
 *
 * @param $tags_metadata
 */
function id3_widget_write_tags_into_file($changed_tags_metadata) {
  getid3_load();
  $tag_writer = new getid3_writetags;
  $getid3_tags_data = & drupal_static('id3_widget_audio_files_metadata');
  foreach ($changed_tags_metadata as $audio_file_id => $tag_data) {
    if (isset($getid3_tags_data[$audio_file_id])) {
      $audio_file_metadata = $getid3_tags_data[$audio_file_id];
      //The getid3 library have problems with writing new tags data
      //without deleting all previous tag data.
      //Therefore data for writing is consist of changed data from node editing page
      //and all metadata from audio file except changed
      $tag_writer->filename = $audio_file_metadata['filenamepath'];
      if (isset($audio_file_metadata['tags']['id3v2'])) {
        $tag_data_for_writings = array_merge($audio_file_metadata['tags']['id3v2'], $tag_data);
        if (!isset($tag_data_for_writings['attached_picture']) && isset($audio_file_metadata['id3v2']['APIC'])) {
          $tag_data_for_writings['attached_picture'] = $audio_file_metadata['id3v2']['APIC'];
        }
        if (isset($tag_data_for_writings['bpm'])) {
          $tag_data_for_writings['beats_per_minute'] = $tag_data_for_writings['bpm'];
          unset($tag_data_for_writings['bpm']);
        }
        if (isset($tag_data_for_writings['track_number'])) {
          $tag_data_for_writings['tracknumber'] = $tag_data_for_writings['truck_number'];
          unset($tag_data_for_writings['truck_number']);
        }
        $tag_writer->tagformats = array('id3v2.4');
        $tag_writer->tag_encoding = $audio_file_metadata['id3v2']['encoding'];
        $tag_writer->tag_data = $tag_data_for_writings;
      }
      else {
        $tag_writer->tagformats = array('id3v2.4');
        $tag_writer->tag_encoding = 'UTF-8';
        $tag_writer->tag_data = array_merge($audio_file_metadata['tags']['id3v1'], $tag_data);
      }
      dpm($tag_writer);
      if ($tag_writer->WriteTags()) {
        if (!empty($tag_writer->warnings)) {
          watchdog('id3_widget', implode('; ', $tag_writer->warnings), array(), WATCHDOG_WARNING);
        }
      }
      else {
        watchdog('id3_widget', implode('; ', $tag_writer->errors), array(), WATCHDOG_ERROR);
      }
    }
  }
}

