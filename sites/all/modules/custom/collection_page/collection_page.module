<?php

/**
 * @file
 * The main file of Collection Page module.
 * Provides three types of view for collection page -
 * timeline, location and default views.
 */

/**
 * Implements hook_menu().
 */
function collection_page_menu() {
  $items = array();
  $items['timeline-json'] = array(
    'access callback' => TRUE,
    'page callback' => 'collection_page_timeline_json_callback',
    'type' => MENU_CALLBACK,
  );
  $items['timeline-iframe'] = array(
    'access callback' => TRUE,
    'page callback' => 'collection_page_timeline_frame_callback',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function collection_page_theme() {
  return array(
    'facet_collection_search_results__alter' => array(
      'variables' => array('results' => NULL),
    ),
    'collection_page' => array(
      'template' => 'theme/collection-page',
      'variables' => array(
        'content' => NULL,
        'default_url' => NULL,
        'thumbnail_url' => NULL
      )
    ),
    'timeline_json' => array(
      'template' => 'theme/timeline-json-page',
      'arguments' => array(
        'options' => NULL,
      ),
    ),
    'timeline_iframe' => array(
      'template' => 'theme/timeline-iframe-page',
    ),
    'collection_standard_thumbnail_view' => array(
      'template' => 'theme/collection-standard-thumbnail-view',
      'variables' => array('results' => NULL)
    ),
    'collection_search_results' => array(
      'template' => 'theme/collection-search-results',
      'variables' => array('results' => NULL, 'bundle_machine_name' => NULL)
    ),
    'collection_search_result' => array(
      'template' => 'theme/collection-search-result',
      'variables' => array('result' => NULL, 'image_style' => NULL)
    ),
    'collection_standard_default_view' => array(
      'template' => 'theme/collection-standard-default-view',
      'variables' => array('results' => NULL)
    ),
    'collection_search_result_snippet_data' => array(
      'template' => 'theme/collection-page-search-result-snippet',
      'variables' => array('snippet_type' => NULL, 'snippet_data' => NULL),
    ),
  );
}

/**
 * Alters default theme of facet collection page
 *
 * @param $variables
 * @return string
 */
function theme_facet_collection_search_results__alter($variables) {
  $content_tabs = array(
    '#standard-default' => array(
      '#id' => 'standard-default-view',
      '#title' => 'Standard View (Default)',
      '#class' => 'standart',
    ),
    '#standard-thumbnail' => array(
      '#id' => 'standard-thumbnail-view',
      '#title' => 'Standard View (Thumbnail)',
      '#class' => 'thumbnail',
    ),
    '#timeline' => array(
      '#id' => 'timeline-view',
      '#title' => t('Timeline View'),
      '#class' => 'timeline',
    ),
    '#location' => array(
      '#id' => 'location-view',
      '#title' => t('Location View'),
      '#class' => 'location',
    ),
  );
  $disabled_tabs = array();

  $results = $variables['results'];
  $content_tabs['#standard-default']['#content'] = array(theme('collection_standard_default_view', array('results' => $results)));
  $content_tabs['#standard-thumbnail']['#content'] = array(theme('collection_standard_thumbnail_view', array('results' => $results)));


  //Put apache_solr request results into SESSION for process those in timeline data callback
  $_SESSION['collection_page_apache_solr_results'] = $results;

  //Define for what bundle current apache_solr request was executed
  $bundle = '';
  if (isset($_GET['f'])) {
    foreach ($_GET['f'] as $filter) {
      $exploded_filter = explode(':', $filter);
      if ($exploded_filter[0] == 'bundle') {
        $bundle = $exploded_filter[1];
      }
    }
  }

  // Set page title.
  drupal_set_title('Library');

  $timeline_library = libraries_get_path('timeline');
  $bundle_date_fields = _collection_page_get_date_fields_from_bundle($bundle);
  if (!empty($timeline_library) && !empty($bundle_date_fields)) {
    $content_tabs['#timeline']['#content'] = array(
      '#view' => theme('timeline_iframe'),
      '#pager' => theme('pager', array('tags' => NULL)),
    );
  }
  else {
    $disabled_tabs[] = '#timeline';
  }

  $node_ids = '';
  foreach ($results as $result) {
    if ($result['bundle'] == 'location') {
      //Collect NIDs of nodes for bundle Location
      $node_ids = implode(',', array($node_ids, $result['node']->entity_id));
    }
    else {
      $node = node_load($result['node']->entity_id);
      //Collect NIDs of referenced location nodes for bunlde Files
      $instances = field_info_instances('node', $node->type);
      foreach ($instances as $field_name => $instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'entityreference' && in_array('location', $field_info['settings']['handler_settings']['target_bundles'])) {
          $items = field_get_items('node', $node, $field_info['field_name']);
          if (!empty($items)) {
            $node_ids = implode(',', array($node_ids, $items[0]['target_id']));
          }
        }
      }
    }

  }
  $node_ids = substr($node_ids, 1);
  $location_view_openlayer_map = NULL;
  if (!empty($node_ids)) {
    $location_view_openlayer_map = views_embed_view('location_view', 'map', $node_ids);
  }
  if (!empty($location_view_openlayer_map)) {
    $content_tabs['#location']['#content'] = array(
      '#view' => $location_view_openlayer_map,
      '#pager' => theme('pager', array('tags' => NULL)),
    );
  }
  else {
    $disabled_tabs[] = '#location';
  }

  $tabs = array_keys($content_tabs);
//Define default and disabled tabs on collection page
  switch ($bundle) {
    case 'people':
    case 'events':
      $default_tab = array_search('#timeline', $tabs);
      break;
    case 'location':
      $default_tab = array_search('#location', $tabs);
      break;
    default:
      $default_tab = array_search('#standard_default', $tabs);
      break;
  }

  foreach ($disabled_tabs as $disabled_tab) {
    $disabled_tabs_for_js[] = array_search($disabled_tab, $tabs);
  }

//Include on page supports files for building tabs and inserting into them needed views
//like timeline, default or location views
  drupal_add_library('system', 'ui.tabs');
  drupal_add_css(drupal_get_path('module', 'collection_page') . '/css/collection_page_style.css');
  drupal_add_js(drupal_get_path('module', 'collection_page') . '/js/collection_page_tabs.js');
  drupal_add_js(drupal_get_path('module', 'collection_page') . '/js/collection_page_thumbnails.js');
  drupal_add_js(libraries_get_path('jquery_cookie') . '/jquery.cookie.js');


//Set the number of tab which was selected by default and disabled.
  drupal_add_js(array('collection_page' => array('default_tab' => $default_tab)), 'setting');
  if (!empty($disabled_tabs_for_js)) {
    drupal_add_js(array('collection_page' => array('disabled_tabs' => $disabled_tabs_for_js)), 'setting');
  }

  return theme('collection_page', array(
    'content' => $content_tabs,
  ));
}


/**
 * Page callback for Timeline View on Collection Page.
 */
function collection_page_timeline_frame_callback() {
  $options = new stdClass();
  $options->start_slide = 0;
  $options->timeline_lib_url = $GLOBALS['base_url'] . '/' . libraries_get_path('timeline') . '/compiled/js/storyjs-embed.js';
  echo theme('timeline_json', array('options' => $options));
  exit;
}

/**
 * Page callback for data for TimeLine View
 */
function collection_page_timeline_json_callback() {
  $date = array();
  $results = $_SESSION['collection_page_apache_solr_results'];

  foreach ($results as $result) {
    $asset = new stdClass();
    $timeline_item = new stdClass();
    $asset->media = "";
    $asset->credit = "";
    $asset->caption = "";

    //For each node, which was filtered by apache_solr using chosen filters
    //get image,as media content, and date for time line.
    //There would taken the last image field in node and the last date field in node.
    $node = node_load($result['node']->entity_id);
    $instances = field_info_instances('node', $node->type);
    foreach ($instances as $field_name => $instance) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'image') {
        $items = field_get_items('node', $node, $field_info['field_name']);
        if (!empty($items)) {
          foreach ($items as $item) {
            $uri = $item['uri'];
            $style = 'thumbnail';
            $styles = image_styles();
            if (in_array($style, array_keys($styles))) {
              $image_path = image_style_url($style, $uri);
            }
            else {
              $image_path = file_create_url($uri);
            }
            break;
          }
          if (!empty($image_path)) {
            $asset->media = $image_path;
            break;
          }
        }
      }
    }
    $date_fields = _collection_page_get_date_fields_from_bundle($result['bundle']);
    if (!empty($date_fields)) {
      foreach ($date_fields as $field_name) {
        $item_date = date('Y,m,d', strtotime($result['fields']['dm_facet_collection_' . $field_name][0]));
        //If the node have more then one date fields, the earliest one would be chosen.
        if (isset($timeline_item->startDate)) {
          $timeline_item->startDate = (strtotime($timeline_item->startDate) > strtotime($item_date)) ? $item_date : $timeline_item->startDate;
        }
        else {
          $timeline_item->startDate = $item_date;
        }
      }
    }

    $timeline_item->headline = $result['title'];
    $timeline_item->text = l('read more', $GLOBALS['base_url'] . $result['link'], array(
      'attributes' => array(
        'target' => '_parent',
        'class' => 'active'
      )
    ));
    $timeline_item->asset = $asset;
    $date[] = $timeline_item;
  }

  $json_class = new stdClass();
  $json_class->timeline = new stdClass();
  $json_class->timeline->headline = "";
  $json_class->timeline->type = "default";
  $json_class->timeline->startDate = "0";
  $json_class->timeline->text = "";
  $json_class->timeline->date = $date;
  echo drupal_json_output($json_class);
  exit;
}

/**
 * Preprocess for data page for Timeline View
 */
function collection_page_preprocess_timeline_json(&$vars) {
  $options = $vars['options'];
  $vars['start_slide'] = $options->start_slide;
  $vars['timeline_lib_url'] = $options->timeline_lib_url;
  $vars['source'] = $GLOBALS['base_url'] . '/timeline-json';
}

/**
 * Preprocess for iframe in Timeline View
 */
function collection_page_preprocess_timeline_iframe(&$vars) {
  $vars['iframe_url'] = $GLOBALS['base_url'] . '/timeline-iframe';
  $vars['iframe_width'] = '100%';
  $vars['iframe_height'] = '600px';
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function collection_page_apachesolr_query_alter($query) {
  //Add date field from facet collection in apache_sorl request params.
  //That field would used in Timeline View.
  //There would taken the last date field in current filtering bundle.
  //If bundle was not defined, field would not be added to params.
  $environment = apachesolr_default_environment();
  $indexed_bundles = apachesolr_get_index_bundles($environment, 'node');
  foreach ($indexed_bundles as $bundle) {
    $date_fields = _collection_page_get_date_fields_from_bundle($bundle);
    if (!empty($date_fields)) {
      foreach ($date_fields as $field_name) {
        $query->addParam('fl', 'dm_facet_collection_' . $field_name);
      }
    }
  }
}

/**
 * Return the array of date field names for current bundle
 * or null if that bundle have not date fields.
 *
 * @param $bundle
 * @return array|null
 */
function _collection_page_get_date_fields_from_bundle($bundle) {
  if (!empty($bundle)) {
    $date_fields = array();
    $instances = field_info_instances('node', $bundle);
    foreach ($instances as $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['type'] == 'date' || $field['type'] == 'datetime' || $field['type'] == 'datestamp') {
        $date_fields[] = $field['field_name'];
      }
    }
    return $date_fields;
  }
  return NULL;
}

/**
 * Preprocess function for collection_standard_thumbnail_view
 */
function template_preprocess_collection_standard_thumbnail_view(&$results) {
  // We should find all image fields for the given content type. If somebody puts one of that image fields
  // in collection_thumbnail display settings, we should exclude it from render array, because only one
  // image should be shown. We will put it in static cache to avoid this repeating of this search.
  // Coefficient of scaling image.
  $coeff = 1.2;
  global $base_url;
  $effects = image_style_effects(image_style_load('collection_thumbnail'));
  foreach ($effects as $effect) {
    if ($effect['name'] == 'image_scale') {
      $height = $effect['data']['height'];
    }
  }
  // These variables is used in image_theme() function.
  $attributes = array(
    'class' => array('collection-thumbnail'),
    'style' => array("height:" . $height . "px"),
  );
  $variables = array(
    'style_name' => 'origin',
    'attributes' => $attributes,
  );
  $results['collection_thumbnails'] = array();
  foreach ($results['results'] as $result) {
    $node = node_load($result['node']->entity_id);
    $bundle = $node->type;
    $image_fields = _collection_page_get_bundle_image_fields($bundle);
    $thumbnail_content = array();
    $thumbnail_content['node_link'] = $base_url . $result['link'];
    $thumbnail_field = collection_page_get_image_field($node);
    $thumbnail_content['image'] = collection_page_node_snippet_image($node, $thumbnail_field, $variables);
    $thumbnail_view = node_view($node, 'collection_thumbnail');
    // Exclude image fields.
    foreach ($image_fields as $image_field) {
      if (in_array($image_field, $thumbnail_view)) {
        unset($thumbnail_view[$image_field]);
      }
    }
    $thumbnail_content['meta_info'] = render($thumbnail_view);
    $results['collection_thumbnails'][] = $thumbnail_content;
  }
  drupal_add_js(array(
    'collection_page' => array(
      'height' => $height,
      'coefficient' => $coeff
    )
  ), 'setting');
  $results['pager'] = theme('pager', array('tags' => NULL));
}

/**
 * Return all image fields for given content type.
 */
function _collection_page_get_bundle_image_fields($bundle) {
  $image_cache = cache_get('collection_page:image_fields');
  if (!$image_cache || !isset($image_cache->data[$bundle])) {
    $image_fields = $image_cache->data;
    $image_fields[$bundle] = array();
    $instances = field_info_instances('node', $bundle);
    foreach ($instances as $instance) {
      $field_info = field_info_field($instance['field_name']);
      if ($field_info['type'] == 'image') {
        $image_fields[$bundle][] = $field_info['field_name'];
      }
    }
    cache_set('collection_page:image_fields', $image_fields, 'cache', CACHE_TEMPORARY);
  }else{
    $image_fields[$bundle] = $image_cache->data[$bundle];
  }
  return $image_fields[$bundle];
}

/**
 * Preprocess function for collection_standard_default_view.
 */
function template_preprocess_collection_standard_default_view(&$variables) {
  $results = $variables['results'];
  $variables['results'] = theme('collection_search_results',
    array(
      'results' => $results,
    )
  );
}

/**
 * Preprocess function for collection_page.
 */
function template_preprocess_collection_page(&$variables) {
  foreach ($_GET['f'] as $filter) {
    $arr = explode(':', $filter);
    if ((count($arr) != 1) && ($arr[0] == 'bundle')) {
      $bundle = $arr[1];
    }
  }
  $bundle_list = node_type_get_types();
  $bundle_name = $bundle_list[$bundle]->name;
  $variables['bundle'] = $bundle_name;
}

function collection_page_preprocess_breadcrumb(&$variables) {
  if (arg(0) == 'node'
    && is_numeric(arg(1))
    && (isset($_GET['collection']) && $_GET['collection'] == 'true')
    && isset($_GET['curr'])
  ) {

    // Build link at library page.
    $library_get_options = $_GET;
    unset($library_get_options['query']);
    unset($library_get_options['numFound']);
    unset($library_get_options['curr']);
    unset($library_get_options['collection']);
    unset($library_get_options['q']);
    if (isset($_GET['query'])) {
      $path = 'library/' . $_GET['query'];
    }
    else {
      $path = 'library';
    }
    $back_to_library_html = l(t('Library'), $path, array('query' => $library_get_options));
    $variables['breadcrumb'][1] = $back_to_library_html;
  }
  if (arg(0) == 'library') {
    $variables['breadcrumb'][1] = t('Library');

    // Get the label of the bundle.
    if (isset($_GET['f'])) {
      foreach ($_GET['f'] as $filter) {
        $exploded_filter = explode(':', $filter);
        if ($exploded_filter[0] == 'bundle') {
          $bundle = $exploded_filter[1];
          $info = entity_get_info('node');
          $variables['breadcrumb'][2] = $info['bundles'][$bundle]['label'];
        }
      }
    }

    // Add search word in breadcrumbs.
    if (isset($_GET['q'])) {
      $query = explode('/', $_GET['q']);
      if ($query[0] == 'library' && isset($query[1])) {
        $variables['breadcrumb'][3] = t($query[1]);
        $searcher_info = facetapi_get_searcher_info();
        $searchers = array_keys($searcher_info);
        $searcher = $searchers[0];
        if ($results = apachesolr_static_response_cache($searcher, NULL)) {
          $num = $results->response->numFound;
          $variables['breadcrumb'][3] .= ' (' . $num . ') ';
        }
      }
    }
  }
}

/**
 * Preprocess function for collection_search_results
 */
function template_preprocess_collection_search_results(&$variables) {
  $variables['search_results'] = '';
  $results = $variables['results'];
  drupal_add_css(drupal_get_path('module', 'collection_page') . '/css/collection_page_search_result.css');
  //Number of rows in page
  if (isset($_GET['rNum'])) {
    $r_num = $_GET['rNum'];
  }
  else {
    $facet_collection_rows_number_variants = variable_get('facet_collection_rows_number_variants', '25 50 100');
    $facet_collection_rows_number_variants = explode(' ', $facet_collection_rows_number_variants);
    $r_num = $facet_collection_rows_number_variants[0];
  }
  $page = pager_find_page();
  $result_number_in_page = 1;
  $style = 'library_page_thumbnail';
  $styles = image_styles();
  if (!in_array($style, array_keys($styles))) {
    $style = FALSE;
  }
  foreach ($results as $result) {
    $result['title'] = ($page * $r_num + $result_number_in_page) . '. ' . $result['title'];
    $variables['search_results'] .= theme('collection_search_result', array(
      'result' => $result,
      'image_style' => $style
    ));
    $result_number_in_page++;
  }
  $variables['pager'] = theme('pager', array('tags' => NULL));
}

/**
 * Preprocess function for collection_search_result
 */
function template_preprocess_collection_search_result(&$variables) {
  global $language;

  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }
  $node = node_load($result['node']->entity_id);
  if ($variables['image_style']) {
    $image_field_name = collection_page_get_image_field($node);
    $image = collection_page_node_snippet_image($node, $image_field_name, array('style_name' => $variables['image_style']));
  }
  else {
    $image = FALSE;
  }
  $variables['image'] = $image;


  $result_snippet_data = collection_page_node_snippet_data($result['node']->entity_id, $result['snippet']);

  $variables['snippet'] = empty($result_snippet_data) ? $result['snippet'] : $result_snippet_data;
}

/**
 * This is hardcoded function which is used for getting image field name for the thumbnail of the given node.
 */
function collection_page_get_image_field($node) {
  //Depending on node type the snippet image will be takes from different fields.
  //If the such field is image field, we need only name of this field, and the image
  // will be takes downwards.
  switch ($node->type) {
    case 'files':
      $items = field_get_items('node', $node, 'field_files_primary_media');
      switch ($items[0]['value']) {
        case 'image':
          $image_field_name = 'field_files_image';
          break;
        case 'audio':
          $image_field_name = 'field_files_album_poster';
          break;
        case 'video':
          $image_field_name = 'video_thumb';
          break;
        case 'document':
          $image_field_name = 'document_thumb';
          break;
      }
      if ($items[0]['value'] == 'image') {
        $image_field_name = 'field_files_image';
      }
      break;
    case 'people':
      $image_field_name = 'field_people_image';
      break;
    case 'location':
      $image_field_name = 'field_location_image';
      break;
    case 'events':
      $image_field_name = 'field_events_image';
      break;
    case 'topics':
      $image_field_name = 'field_topics_image';
      break;
  }
  return $image_field_name;
}


/**
 * Return an image html for for the given node and given image field.
 * @param $variables
 *  An associative array containing all parameters that theme_image() function can take.
 */
function collection_page_node_snippet_image($node, $image_field_name, $variables) {
  $image = FALSE;
  if ($image_field_name == 'video_thumb') {
    if ((module_exists('youtube'))) {
      $youtube_field_items = field_get_items('node', $node, 'field_files_youtube_media');
      if (!empty($youtube_field_items)) {
        foreach ($youtube_field_items as $item) {
          if (isset($item['video_id'])) {
            $image = theme('youtube_thumbnail', array(
              'video_id' => $item['video_id'],
              'image_style' => $variables['style_name'],
            ));
          }
        }
      }
    }
  }
  elseif ($image_field_name == 'document_thumb') {
    //We have two types of snippets for primary media document
    //The first one is Email - if the category of document is Email.
    //The second one - all other documents
    $category_items = field_get_items('node', $node, 'field_files_category');
    if (!empty($category_items)) {
      $item = $category_items[0];
      $term = taxonomy_term_load($item['tid']);
      //For email display just an Email dummy image
      if ($term->name == 'E-Mail') {
        $uri = file_build_uri('collection_page_images/email.png');
        $image = theme('image_style', array_merge($variables, array('path' => $uri)));
      }
    }
    //For the document display thumbnail of pdf file
    if (!$image) {
      $book_field_items = field_get_items('node', $node, 'field_files_file');
      if (!empty($book_field_items)) {
        foreach ($book_field_items as $item) {
          if (isset($item['fid_thumb'])) {
            $file_thumb = file_load($item['fid_thumb']);
            if ($file_thumb) {
              $uri_thumb = $file_thumb->uri;
              $image = theme('image_style', array_merge($variables, array('path' => $uri_thumb)));
            }
          }
        }
      }
    }

  }
  else {
    $items = field_get_items('node', $node, $image_field_name);
    if (!empty($items)) {
      $item = $items[0];
      if (isset($item['uri'])) {
        $uri = $item['uri'];
        $image = theme('image_style', array_merge($variables, array('path' => $uri)));
      }
    }
  }
  // If we still have no image, we should get default image.
  if (!$image) {
    $uri = file_build_uri('collection_page_images/default.png');
    theme('image_style', array_merge($variables, array('path' => $uri)));
  }
  return $image;
}

function collection_page_node_snippet_data($nid, $snippet) {
  $snippet_data = '';
  $node = node_load($nid);
  $trimmed_characters_length = 200;
  $snippet_contain_search_result = FALSE;
  if (isset($_GET['s']) || (arg(0) == 'library' && arg(1) != NULL)) {
    $snippet_contain_search_result = TRUE;
  }

  switch ($node->type) {
    case 'files':
      $snippet_data = collection_page_files_node_snippet_data($node, $trimmed_characters_length, $snippet, $snippet_contain_search_result);
      break;
    case 'people':
      //Snippet data for People content type consist of Description, Birth and Death Date
      $description = '';
      $birth_date = '';
      $death_date = '';

      //Fetch the description
      if ($snippet_contain_search_result) {
        //If the user search some word or frase, we nned to show the snippet from apache solr
        //with highlighted found text.
        $description = $snippet;
      }
      else {
        $items = field_get_items('node', $node, 'field_people_description');
        if (!empty($items)) {
          foreach ($items as $item) {
            //Trim the description text
            if ((module_exists('text') && isset($item['value']))) {
              $description = text_summary($item['value'], NULL, $trimmed_characters_length);
            }
            //We need only one picture from the image field
            //If the field have more then one picture we take the first one.
            break;
          }
        }
      }
      //Fetch the birth date
      $items = field_get_items('node', $node, 'field_people_birthday');
      if (!empty($items)) {
        foreach ($items as $item) {
          //Trim the description text
          if ((module_exists('library_date_field') && isset($item['value']))) {
            $process = array('value', 'value2');
            foreach ($process as $processed) {
              $date[$processed] = library_date_field_get_date($item, $processed);
            }
            $output = !empty($date['value']) ? $date['value'] : '';
            if (sizeof($process) == 2 && !empty($date['value2']) && $date['value'] != $date['value2']) {
              $output .= " - {$date['value2']}";
            }
            $birth_date = $output;
          }
          //We need only one picture from the image field
          //If the field have more then one picture we take the first one.
          break;
        }
      }

      //Fetch the death date
      $items = field_get_items('node', $node, 'field_people_death_date');
      if (!empty($items)) {
        foreach ($items as $item) {
          //Trim the description text
          if ((module_exists('library_date_field') && isset($item['value']))) {
            $process = array('value', 'value2');
            foreach ($process as $processed) {
              $date[$processed] = library_date_field_get_date($item, $processed);
            }
            $output = !empty($date['value']) ? $date['value'] : '';
            if (sizeof($process) == 2 && !empty($date['value2']) && $date['value'] != $date['value2']) {
              $output .= " - {$date['value2']}";
            }
            $death_date = $output;
          }
          //We need only one picture from the image field
          //If the field have more then one picture we take the first one.
          break;
        }
      }
      $snippet_data = theme('collection_search_result_snippet_data', array(
        'snippet_type' => 'people',
        'snippet_data' => array(
          'description' => array(
            '#label' => FALSE,
            '#data' => $description,
          ),
          'birth_date' => array(
            '#label' => 'Birth Date',
            '#data' => $birth_date,
          ),
          'death_date' => array(
            '#label' => 'Death Date',
            '#data' => $death_date,
          ),
        ),
      ));

      break;
    case 'location':

      //Snippet data for Location content type consict of Desctription and Address
      $description = '';
      $address = '';

      //Fetch the description
      if ($snippet_contain_search_result) {
        //If the user search some word or frase, we nned to show the snippet from apache solr
        //with highlighted found text.
        $description = $snippet;
      }
      else {
        $items = field_get_items('node', $node, 'field_location_description');
        if (!empty($items)) {
          foreach ($items as $item) {
            //Trim the description text
            if ((module_exists('text') && isset($item['value']))) {
              $description = text_summary($item['value'], NULL, $trimmed_characters_length);
            }
            //We need only one picture from the image field
            //If the field have more then one picture we take the first one.
            break;
          }
        }
      }

      //Fetch the address
      if (module_exists('addressfield')) {
        $items = field_get_items('node', $node, 'field_location_address');
        $field = field_info_field('field_location_address');
        $instance = field_info_instance('node', 'field_location_address', $node->type);
        $display = $instance['display']['default'];
        $display['type'] = 'addressfield_default';
        $display['settings']['format_handlers'] = array('address');
        $field_element = addressfield_field_formatter_view('node', $node, $field, $instance, LANGUAGE_NONE, $items, $display);
        $address = drupal_render($field_element);

        if (empty($address)) {
          $address = $node->title;
        }
      }
      $snippet_data = theme('collection_search_result_snippet_data', array(
        'snippet_type' => 'location',
        'snippet_data' => array(
          'description' => array(
            '#label' => FALSE,
            '#data' => $description,
          ),
          'address' => array(
            '#label' => 'Address',
            '#data' => $address,
          ),
        ),
      ));

      break;
    case 'events':
      //Snippet data for Events content type consict of Desctription, Location and Date
      $location = array();
      $description = '';
      $date = '';

      //Fetch the descritpion
      if ($snippet_contain_search_result) {
        //If the user search some word or frase, we nned to show the snippet from apache solr
        //with highlighted found text.
        $description = $snippet;
      }
      else {
        $items = field_get_items('node', $node, 'field_events_description');
        if (!empty($items)) {
          foreach ($items as $item) {
            //Trim the description text
            if ((module_exists('text') && isset($item['value']))) {
              $description = text_summary($item['value'], NULL, $trimmed_characters_length);
            }
            //We need only one picture from the image field
            //If the field have more then one picture we take the first one.
            break;
          }
        }
      }

      //Fetch the location
      $items = field_get_items('node', $node, 'field_events_place_nodes');
      if (!empty($items) && module_exists('entityreference')) {
        $target_ids = array();
        foreach ($items as $item) {
          if (isset($item['target_id'])) {
            $target_ids[] = $item['target_id'];
          }
        }
        $field = field_info_field('field_events_place_nodes');
        $target_entities = entity_load($field['settings']['target_type'], $target_ids);

        foreach ($target_ids as $target_id) {
          $target_entity = isset($target_entities[$target_id]) ? $target_entities[$target_id] : array();
          if (isset($target_entity->title)) {
            $label = $target_entity->title;
            $uri = entity_uri($field['settings']['target_type'], $target_entity);
            if ($uri) {
              $location[] = l($label, $uri['path'], $uri['options']);
            }
            else {
              $location[] = check_plain($label);
            }
          }
        }
      }

      //Fetch the date
      if (isset($node->created)) {
        $date = date('d F Y', $node->created);
      }

      $snippet_data = theme('collection_search_result_snippet_data', array(
        'snippet_type' => 'events',
        'snippet_data' => array(
          'description' => array(
            '#label' => FALSE,
            '#data' => $description,
          ),
          'location' => array(
            '#label' => 'Location',
            '#data' => implode(',', $location),
          ),
          'date' => array(
            '#label' => 'Date',
            '#data' => $date,
          ),
        ),
      ));

      break;
    case
      'topics':

      $description = '';
      if ($snippet_contain_search_result) {
        //If the user search some word or frase, we nned to show the snippet from apache solr
        //with highlighted found text.
        $description = $snippet;
      }
      else {
        $items = field_get_items('node', $node, 'field_topics_body');
        if (!empty($items)) {
          foreach ($items as $item) {
            //Trim the description text
            if ((module_exists('text') && isset($item['value']))) {
              $description = text_summary($item['value'], NULL, $trimmed_characters_length);
            }
            //We need only one picture from the image field
            //If the field have more then one picture we take the first one.
            break;
          }
        }
      }

      $snippet_data = theme('collection_search_result_snippet_data', array(
        'snippet_type' => 'topics',
        'snippet_data' => array(
          'description' => array(
            '#label' => FALSE,
            '#data' => $description,
          ),
        ),
      ));

      break;

  }

  return $snippet_data;
}

/**
 * Return the html with snippet data for nodes with content type files
 *
 * @param $node
 * @param $trimmed_characters_length
 * @param $snippet
 * @return string
 */
function collection_page_files_node_snippet_data($node, $trimmed_characters_length, $snippet, $snippet_contain_search_result) {
  $snippet_data = '';

  $items = field_get_items('node', $node, 'field_files_primary_media');
  if (!empty($items)) {
    foreach ($items as $item) {
      if (isset($item['value'])) {
        if ($item['value'] == 'image') {

          //If the user search some word or frase, we nned to show the snippet from apache solr
          //with highlighted found text.
          $search_snippet = $snippet_contain_search_result ? $snippet : FALSE;
          $people_field_data = array();
          $people = array();
          $location_field_data = array();
          $locations = array();
          $date = '';

          //Fetch the people
          $people_items = field_get_items('node', $node, 'field_files_image_people');
          if (!empty($people_items) && module_exists('entityreference')) {
            $target_ids = array();
            foreach ($people_items as $item) {
              if (isset($item['target_id'])) {
                $target_ids[] = $item['target_id'];
              }
            }
            $field = field_info_field('field_files_image_people');
            $target_entities = entity_load($field['settings']['target_type'], $target_ids);

            foreach ($target_ids as $target_id) {
              $target_entity = isset($target_entities[$target_id]) ? $target_entities[$target_id] : array();
              if (isset($target_entity->title)) {
                $label = $target_entity->title;
                $uri = entity_uri($field['settings']['target_type'], $target_entity);
                $plain_label = check_plain($label);
                if ($uri) {
                  $people[] = array(
                    'normal' => l($label, $uri['path'], $uri['options']),
                    'plain' => $plain_label
                  );
                }
                else {
                  $people[] = array(
                    'normal' => $plain_label,
                    'plain' => $plain_label
                  );
                }
              }
            }
          }

          //Fetch the location
          $location_items = field_get_items('node', $node, 'field_files_image_location');
          if (!empty($location_items) && module_exists('entityreference')) {
            $target_ids = array();
            foreach ($location_items as $item) {
              if (isset($item['target_id'])) {
                $target_ids[] = $item['target_id'];
              }
            }
            $field = field_info_field('field_files_image_location');
            $target_entities = entity_load($field['settings']['target_type'], $target_ids);

            foreach ($target_ids as $target_id) {
              $target_entity = isset($target_entities[$target_id]) ? $target_entities[$target_id] : array();
              if (isset($target_entity->title)) {
                $label = $target_entity->title;
                $uri = entity_uri($field['settings']['target_type'], $target_entity);
                $plain_label = check_plain($label);
                if ($uri) {
                  $locations[] = array(
                    'normal' => l($label, $uri['path'], $uri['options']),
                    'plain' => $plain_label
                  );
                }
                else {
                  $locations[] = array(
                    'normal' => $plain_label,
                    'plain' => $plain_label
                  );
                }
              }
            }
          }

          //Fetch the date
          if (isset($node->created)) {
            $date = date('d F Y', $node->created);
          }


          //Cut the people to get the result line without wrap
          $tmp_people = array();
          foreach ($people as $person) {
            $tmp_people[] = $person['plain'];
            $length = iconv_strlen(implode(',', $tmp_people), 'UTF-8');
            if ($length < 40) {
              $people_field_data[] = $person['normal'];
            }
            else {
              $people_field_data[] = '...';
              break;
            }
          }

          //Cut the locations to get the result line without wrap
          $tmp_locations = array();
          foreach ($locations as $location) {
            $tmp_locations[] = $location['plain'];
            $length = iconv_strlen(implode(',', $tmp_locations), 'UTF-8');
            if ($length < 40) {
              $location_field_data[] = $location['normal'];
            }
            else {
              $location_field_data[] = '...';
              break;
            }
          }

          $snippet_data = theme('collection_search_result_snippet_data', array(
            'snippet_type' => 'files-image',
            'snippet_data' => array(
              'search_snippet' => array(
                '#label' => FALSE,
                '#data' => $search_snippet,
              ),
              'people' => array(
                '#label' => 'People',
                '#data' => implode(',', $people_field_data),
              ),
              'location' => array(
                '#label' => 'Location',
                '#data' => implode(',', $location_field_data),
              ),
              'date' => array(
                '#label' => 'Date',
                '#data' => $date,
              ),
            ),
          ));
        }
        elseif ($item['value'] == 'audio') {
          //Snippet for files node with primary media audio consist of description and length of audio file

          $description = '';
          $length = '';
          //Fetch the description
          if ($snippet_contain_search_result) {
            //If the user search some word or frase, we nned to show the snippet from apache solr
            //with highlighted found text.
            $description = $snippet;
          }
          else {
            $description_items = field_get_items('node', $node, 'field_files_description');
            if (!empty($description_items)) {
              foreach ($description_items as $item) {
                //Trim the description text
                if ((module_exists('text') && isset($item['value']))) {
                  $description = text_summary($item['value'], NULL, $trimmed_characters_length);

                }
                //We need only one picture from the image field
                //If the field have more then one picture we take the first one.
                break;
              }
            }
          }

          //Fetch the length
          $length_items = field_get_items('node', $node, 'field_files_length');
          if (!empty($length_items)) {
            foreach ($length_items as $item) {
              //Trim the description text
              if (isset($item['value'])) {
                $length = $item['value'];
              }
              //We need only one picture from the image field
              //If the field have more then one picture we take the first one.
              break;
            }
          }

          $snippet_data = theme('collection_search_result_snippet_data', array(
            'snippet_type' => 'files-audio',
            'snippet_data' => array(
              'description' => array(
                '#label' => FALSE,
                '#data' => $description,
              ),
              'length' => array(
                '#label' => 'Length',
                '#data' => $length,
              ),
            ),
          ));
        }
        elseif ($item['value'] == 'video') {

          $description = '';
          $length = '';
          //Fetch the description
          if ($snippet_contain_search_result) {
            //If the user search some word or frase, we nned to show the snippet from apache solr
            //with highlighted found text.
            $description = $snippet;
          }
          else {
            $description_items = field_get_items('node', $node, 'field_files_description');
            if (!empty($description_items)) {
              foreach ($description_items as $item) {
                //Trim the description text
                if ((module_exists('text') && isset($item['value']))) {
                  $description = text_summary($item['value'], NULL, $trimmed_characters_length);
                }
                //We need only one picture from the image field
                //If the field have more then one picture we take the first one.
                break;
              }
            }
          }

          //Fetch the length
          $length_items = field_get_items('node', $node, 'field_files_video_length');
          if (!empty($length_items)) {
            foreach ($length_items as $item) {
              //Trim the description text
              if (isset($item['value'])) {
                $length = date('H:i:s', $item['value']);
              }
              //We need only one picture from the image field
              //If the field have more then one picture we take the first one.
              break;
            }
          }

          $snippet_data = theme('collection_search_result_snippet_data', array(
            'snippet_type' => 'files-videos',
            'snippet_data' => array(
              'description' => array(
                '#label' => FALSE,
                '#data' => $description,
              ),
              'length' => array(
                '#label' => 'Length',
                '#data' => $length,
              ),
            ),
          ));
        }
        elseif ($item['value'] == 'document') {
          //We have two types of snippets for primary media document
          //The first one is Email - if the category of document is Email.
          //The second one - all other documents
          $category_items = field_get_items('node', $node, 'field_files_category');
          if (!empty($category_items)) {
            foreach ($category_items as $item) {
              if ((module_exists('taxonomy')) && isset($item['tid'])) {
                $term = taxonomy_term_load($item['tid']);
                //For email display just date
                if ($term->name == 'E-Mail') {
                  //If the user search some word or frase, we nned to show the snippet from apache solr
                  //with highlighted found text.
                  $search_snippet = $snippet_contain_search_result ? $snippet : FALSE;
                  $date = '';
                  if (isset($node->created)) {
                    $date = date('d F Y', $node->created);
                  }

                  $snippet_data = theme('collection_search_result_snippet_data', array(
                    'snippet_type' => 'files-email',
                    'snippet_data' => array(
                      'search_snippet' => array(
                        '#label' => FALSE,
                        '#data' => $search_snippet,
                      ),
                      'date' => array(
                        '#label' => 'Date',
                        '#data' => $date,
                      ),
                    ),
                  ));
                }
                //For the document display author and date and subtitle

              }
              //We need only one picture from the image field
              //If the field have more then one picture we take the first one.
              break;
            }
          }

          if (!$snippet_data) {
            $subtitle = '';
            $author = array();
            $date = '';

            //Fetch the subtitle
            $subtitle_items = field_get_items('node', $node, 'field_files_subtitle');
            if (!empty($subtitle_items)) {
              foreach ($subtitle_items as $item) {
                //Trim the description text
                if (isset($item['value'])) {
                  $subtitle = $item['value'];
                }
                //We need only one picture from the image field
                //If the field have more then one picture we take the first one.
                break;
              }
            }
            //If the user search some word or frase, we nned to show the snippet from apache solr
            //with highlighted found text.
            $search_snippet = $snippet_contain_search_result ? $snippet : FALSE;

            //Fetch the location
            $author_items = field_get_items('node', $node, 'field_files_author');
            if (!empty($author_items) && module_exists('entityreference')) {
              $target_ids = array();
              foreach ($author_items as $item) {
                if (isset($item['target_id'])) {
                  $target_ids[] = $item['target_id'];
                }
              }
              $field = field_info_field('field_events_place_nodes');
              $target_entities = entity_load($field['settings']['target_type'], $target_ids);

              foreach ($target_ids as $target_id) {
                $target_entity = isset($target_entities[$target_id]) ? $target_entities[$target_id] : array();
                if (isset($target_entity->title)) {
                  $label = $target_entity->title;
                  $uri = entity_uri($field['settings']['target_type'], $target_entity);
                  if ($uri) {
                    $author[] = l($label, $uri['path'], $uri['options']);
                  }
                  else {
                    $author[] = check_plain($label);
                  }
                }
              }
            }

            //Fetch the date
            if (isset($node->created)) {
              $date = date('d F Y', $node->created);
            }

            $snippet_data = theme('collection_search_result_snippet_data', array(
              'snippet_type' => 'files-document',
              'snippet_data' => array(
                'subtitle' => array(
                  '#label' => FALSE,
                  '#data' => $subtitle,
                ),
                'search_snippet' => array(
                  '#label' => FALSE,
                  '#data' => $search_snippet,
                ),
                'author' => array(
                  '#label' => 'Author',
                  '#data' => implode(',', $author),
                ),
                'date' => array(
                  '#label' => 'Date',
                  '#data' => $date,
                ),
              ),
            ));

          }
        }
      }
      break;
    }
  }

  return $snippet_data;
}
