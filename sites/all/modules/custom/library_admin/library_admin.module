<?php

define('LIBRARY_ADMIN_TEXT_TO_COPIRIGHT', variable_get('library_admin_text_to_copyright'));
define('LIBRARY_ADMIN_PATH_TO_COPIRIGHT', variable_get('library_admin_path_to_copyright'));
define('LIBRARY_ADMIN_TAXONOMY_FAQ_TERM', 'FAQ');
define('LIBRARY_ADMIN_TAXONOMY_TAGS_COLLECTION', 'tags');
define('LIBRARY_ADMIN_TAXONOMY_HOME_REGION_COLLECTION', 'home_region');
define('LIBRARY_ADMIN_TAXONOMY_HOME_REGION_HOME_LEFT', variable_get('taxonomy_home_region_home_left'));
define('LIBRARY_ADMIN_TAXONOMY_HOME_REGION_HOME_MIDDLE', variable_get('taxonomy_home_region_home_middle'));
define('LIBRARY_ADMIN_TAXONOMY_HOME_REGION_HOME_RIGHT', variable_get('taxonomy_home_region_home_right'));

/**
 * Implements hook_menu().
 */
function library_admin_menu() {
  $items = array();
  $items['admin/library_settings'] = array(
    'title' => t('Site configuration page'),
    'dascription' => t('This page is contain all settings for site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('library_admin_settings_form'),
    'access callback' => TRUE,
    'file' => 'library_admin.settings.inc',
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function library_admin_init() {
  $settings = array(
    'faq' => library_admin_get_faq_nodes(),
  );
  drupal_add_js(array('Library' => $settings), 'setting');
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function library_admin_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('ctools', 'panels'))) {
    return "plugins/$plugin";
  }
}

/**
 * Help function for copiright link.
 */
function library_admin_return_copiright() {
  if ($text = LIBRARY_ADMIN_TEXT_TO_COPIRIGHT && $path = LIBRARY_ADMIN_PATH_TO_COPIRIGHT) {
    $copiright = l(
      t(LIBRARY_ADMIN_TEXT_TO_COPIRIGHT),
      check_url(LIBRARY_ADMIN_PATH_TO_COPIRIGHT)
    );
    return $copiright;
  }
}

/**
 * Form for search by faq page.
 */
function library_admin_faq_form($form, $form_state) {
  drupal_set_title(t('FAQ'));

  $form['main_title'] = array(
    '#prefix' => '<h2>',
    '#markup' => t('Answers'),
    '#suffix' => '</h2>',
  );

  $form['description'] = array(
    '#markup' => t('Find answers to the most commonly asked questions by browsing through our list of topics, or via our search functionality:'),
  );

  $form['title'] = array(
    '#prefix' => '<h3>',
    '#markup' => t('Search'),
    '#suffix' => '</h3хоро>',
  );

  $form['text'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('search-faq-text')
    )
  );

  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('search-faq')
    )
  );

  $form['results'] = array(
    '#markup' => '<div id="faq-results"></div>',
  );

  return $form;
}

/**
 * Return array with nodes from collection FAQ.
 */
function library_admin_get_faq_nodes() {

  if ($cache = cache_get('faq')) {
    $output = $cache->data;
  }
  else {
    $output = array();

    // Get nids and titles nodes.
    if (db_table_exists('menu_links')) {
      $nids = array();
      $query['links'] = db_query('SELECT m.link_path from {menu_links} m
      WHERE m.router_path = :path AND m.menu_name = :name',
        array(
          ':path' => 'node/%',
          ':name' => 'menu-faq'
        )
      );
      $links = $query['links']->fetchCol();
      foreach ($links as $link) {
        $exploded_link = explode('/', $link);
        $nid = $exploded_link[1];
        $nids[] = $nid;
      }

      $nodes = array();
      if(!empty($nids)){
      $query['nodes'] = db_query('
        SELECT n.nid, n.title from {node} n
        WHERE n.nid IN (' . implode(',', $nids) . ') ');
        $nodes = $query['nodes']->fetchAllAssoc('nid');
      }

      if (!empty($nodes)) {
        $nids = implode(', ', array_map(function ($node) {
          return $node->nid;
        }, $nodes));
        $source = array_map(function ($node) {
          return '\'' . 'node/' . $node->nid . '\'';
        }, $nodes);

        // Get aliases nodes.
        if (db_table_exists('url_alias')) {
          $source = implode(', ', $source);
          $query['aliases'] = db_query("
            SELECT u.alias, u.source from {url_alias} u
            WHERE u.source IN ($source)");
          $aliases = $query['aliases']->fetchAllAssoc('source');
        }

        // Get keywords nodes.
        if (db_table_exists('field_data_field_files_key_points')) {
          $query['keywords'] = db_query("
            SELECT k.entity_id, k.field_files_key_points_value from {field_data_field_files_key_points} k
            WHERE k.entity_id IN ($nids)");
          $keywords = $query['keywords']->fetchAllAssoc('entity_id');
        }

        foreach ($nodes as $key => $node) {
          $source = 'node/' . $key;
          $output[] = array(
            'nid' => $key,
            'title' => $node->title,
            'alias' => (!empty($aliases) && ($source == $aliases[$source]->source))
              ? $aliases['node/' . $key]->alias
              : '',
            'keywords' => (!empty($keywords) && isset($keywords[$key]->field_files_key_points_value))
              ? $keywords[$key]->field_files_key_points_value
              : ''
          );
        }
      }
    }

    cache_set('faq', $output);
  }
  return $output;
}

/**
 * Implements hook_entity_info_alter().
 */
function library_admin_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['home_top'] = array(
    'label' => t('Home Top'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home_left'] = array(
    'label' => t('Home Left'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home_middle'] = array(
    'label' => t('Home Middle'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home_right'] = array(
    'label' => t('Home Right'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home_bottom'] = array(
    'label' => t('Home Bottom'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function library_admin_field_formatter_info() {
  return array(
    'library_text' => array(
      'label' => t('Library text'),
      'field types' => array('text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function library_admin_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'library_text':
      if (!empty($items)) {
        foreach ($items as $delta => $item) {
          $output = _text_sanitize($instance, $langcode, $item, 'value');
          $output = library_admin_replacement_tags($output);
          $element[$delta] = array('#markup' => $output);
        }
      }
      break;
  }
  return $element;
}

/**
 * Help function for replace tags <QUESTION> and <ANSWER>.
 */
function library_admin_replacement_tags($value) {
  $value = preg_replace('/<question>/', '<div class="question"><div class ="mailheader">Question</div>', $value);
  $value = preg_replace('/<\/question>/', '</div>', $value);
  $value = preg_replace('/<answer>/', '<div class="answer"><div class ="mailheader">Answer</div>', $value);
  $value = preg_replace('/<\/answer>/', '</div>', $value);
  $value = preg_replace('/{\*(.*)\*}/', '___________', $value);
  return $value;
}
