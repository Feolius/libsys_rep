<?php

require_once(drupal_get_path('module', 'field_data_collector') . '/field_data_collector.admin.inc');

function field_data_collector_menu() {
  $items = array();
  $items['admin/config/media/field-data-collector-presets'] = array(
    'access arguments' => array('administer field data collector presets'),
    'title' => 'Field Data Collector presets',
    'page callback' => 'field_data_collector_presets_admin_form',
    'description' => 'Administer Field Data Collector presets.',
    'file' => 'field_data_collector.admin.inc',
  );
  $items['admin/config/media/field-data-collector-presets/add'] = array(
    'access arguments' => array('administer field data collector presets'),
    'title' => 'Add new preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_data_collector_add_preset_form'),
    'file' => 'field_data_collector.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/field-data-collector-presets/edit/%'] = array(
    'access arguments' => array('administer field data collector presets'),
    'title' => 'Edit preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_data_collector_edit_preset_form', 5),
    'file' => 'field_data_collector.admin.inc',
  );
  $items['admin/config/media/field-data-collector-presets/delete/%'] = array(
    'access arguments' => array('administer field data collector presets'),
    'title' => 'Delete preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_data_collector_delete_preset_form', 5),
    'file' => 'field_data_collector.admin.inc',

  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function field_data_collector_permission() {
  return array(
    'administer field data collector presets' => array(
      'title' => t('administer Field Data Collector presets'),
      'description' => t('Perform administration of Field Data Collector presets'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function field_data_collector_field_info() {
  return array(
    'field_data_collector' => array(
      'label' => t('Field data collector'),
      'description' => t('This field stores data from another fields'),
      'default_widget' => 'field_data_collector_entityreference_widget',
      'default_formatter' => 'field_data_collector_default_formatter',
      'settings' => array(
        'target_type' => 'node',
        'collecting_fields' => array(),
        'target_bundles' => array(),
        'last_changes_time' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function field_data_collector_field_widget_info() {
  return array(
    'field_data_collector_default_widget' => array(
      'label' => t('Field data collector'),
      'field types' => array('field_data_collector'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info()
 */
function field_data_collector_field_formatter_info() {
  return array(
    'field_data_collector_entityreference_formatter' => array(
      'label' => t('Entity reference primary media'),
      'field types' => array('field_data_collector'),
      'description' => t('Display the primary content for referenced node'),
      'settings' => array(
        'content_types_settings' => array(),
      ),
    ),
    'field_data_collector_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_data_collector'),
      'description' => t('Display the titles of referenced nodes'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function field_data_collector_field_settings_form($field, $instance, $has_data) {
  // The field settings infrastructure is not AJAX enabled by default,
  // because it doesn't pass over the $form_state.
  // Build the whole form into a #process in which we actually have access
  // to the form state.

  $form = array(
    '#type' => 'container',
    '#process' => array(
      '_field_data_collector_field_settings_form_process',
    ),
    '#field' => $field,
    '#instance' => $instance,
    '#has_data' => $has_data,
  );

  return $form;
}

function _field_data_collector_field_settings_form_process($form, $form_state) {
  $field = isset($form_state['field_data_collector']['field']) ? $form_state['field_data_collector']['field'] : $form['#field'];
  $instance = isset($form_state['field_data_collector']['instance']) ? $form_state['field_data_collector']['instance'] : $form['#instance'];

  $settings = $field['settings'];

  $bundle = $instance['bundle'];
  $instances = field_info_instances('node', $bundle);
  unset($instances[$instance['field_name']]);


  $collecting_fields = array();
  foreach ($instances as $instance_name => $instance) {
    $field_of_instances[$instance_name] = field_info_field($instance_name);

    if ($field_of_instances[$instance_name]['type'] == 'entityreference'
      && $field_of_instances[$instance_name]['settings']['target_type'] == 'node'
    ) {
      $collecting_fields[$instance_name] = $instance['label'];
    }
  }

  if (!empty($collecting_fields)) {

    $collecting_fields_settings = $settings['collecting_fields'];

    $collecting_fields_settings = isset($form_state['values']['field']['settings']['collecting_fields'])
      ? $form_state['values']['field']['settings']['collecting_fields']
      : $collecting_fields_settings;

    $form['collecting_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Collecting fields'),
      '#options' => $collecting_fields,
      '#default_value' => $collecting_fields_settings,
      '#size' => 6,
      '#multiple' => TRUE,
      '#description' => t('The fields data from whose will be collected into this field.'),
      '#ajax' => array(
        'callback' => '_field_data_collector_field_settings_ajax_callback',
        'wrapper' => 'target_bundles_checkboxes',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#element_validate' => array('_field_data_collector_element_validate_filter'),
    );

    $bundles = array();
    $entity_info = entity_get_info('node');
    if (empty($collecting_fields_settings)) {
      foreach ($collecting_fields as $field_name => $inctance_label) {
        $entity_reference_field_bundles = $field_of_instances[$field_name]['settings']['handler_settings']['target_bundles'];
        foreach ($entity_reference_field_bundles as $bundle_name) {
          if (isset($entity_info['bundles'][$bundle_name]['label'])) {
            $bundles[$bundle_name] = $entity_info['bundles'][$bundle_name]['label'];
          }
        }
      }
    }
    else {
      foreach ($collecting_fields_settings as $field_name => $field_checkbox_value) {
        if (!empty($field_checkbox_value)) {
          $entity_reference_field_bundles = $field_of_instances[$field_name]['settings']['handler_settings']['target_bundles'];
          foreach ($entity_reference_field_bundles as $bundle_name) {
            if (isset($entity_info['bundles'][$bundle_name]['label'])) {
              $bundles[$bundle_name] = $entity_info['bundles'][$bundle_name]['label'];
            }
          }
        }
      }
    }


    $form['target_bundles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Target bundles'),
      '#options' => $bundles,
      '#default_value' => $settings['target_bundles'],
      '#multiple' => TRUE,
      '#size' => 6,
      '#description' => t('The bundles of the entity type that can be referenced.'),
      '#prefix' => '<div id = "target_bundles_checkboxes">',
      '#suffix' => '</div>',
      '#element_validate' => array('_field_data_collector_element_validate_filter'),
    );
  }
  else {
    $form['collecting_fields'] = array(
      '#type' => 'fieldset',
      '#title' => t('Collecting fields'),
      '#description' => t('There is no entity reference field in current content type. Please add such fields and then come back to choose them for collecting data.'),
    );
  }

  $form['last_changes_time'] = array(
    '#type' => 'hidden',
    '#value' => REQUEST_TIME,
  );


  return $form;
}

/**
 * AJAX callback function for the subform with target bundles
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _field_data_collector_field_settings_ajax_callback($form, $form_state) {
  return $form['field']['settings']['target_bundles'];
}

/**
 * Form validate for the checkboxes int the widget form. After this validation
 * every value which was not choosen will be erased from form state.
 *
 * @param $element
 * @param $form_state
 */
function _field_data_collector_element_validate_filter(&$element, &$form_state) {
  $element['#value'] = array_filter($element['#value']);
  form_set_value($element, $element['#value'], $form_state);
}

/**
 * Implements hook_field_attach_presave().
 */
function field_data_collector_field_attach_presave($entity_type, $entity) {
  if ($entity_type == 'node') {
    $bundle = $entity->type;
    $instances = field_info_instances($entity_type, $bundle);
    foreach ($instances as $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['type'] == 'field_data_collector') {
        $collector_field_field_items = array();
        $collecting_fields_could_have_needed_items = FALSE;
        $target_bundles = $field['settings']['target_bundles'];
        $collecting_fields = $field['settings']['collecting_fields'];
        $field_settings_last_changes_time = $field['settings']['last_changes_time'];

        foreach ($collecting_fields as $collecting_field_name) {

          $collecting_field_items = field_get_items($entity_type, $entity, $collecting_field_name);

          $origin_collecting_field_items = property_exists($entity, 'original') ? field_get_items($entity_type, $entity->original, $collecting_field_name) : array();

          //Verify the collecting field, if it isn't changed we shouldn't regerenerate the
          // current field_data_collector field.
          //Also if the field_data_collector field was added into the bundle when some content
          // has been already existed we sould also generate the data for the field.
          if (!empty($collecting_field_items) &&
            (($entity->changed <= $field_settings_last_changes_time)
              || ($collecting_field_items != $origin_collecting_field_items))
          ) {

            $collecting_field_info = field_info_field($collecting_field_name);

            $bundles_intersection = array_intersect($target_bundles, $collecting_field_info['settings']['handler_settings']['target_bundles']);
            if ($collecting_field_info['settings']['handler_settings']['target_bundles'] == $target_bundles) {
              $collecting_fields_could_have_needed_items = TRUE;
              foreach ($collecting_field_items as $item) {
                if (count($collector_field_field_items) < 40) {
                  $collector_field_field_items[] = $item['target_id'];
                }
                else {
                  break;
                }
              }
            }
            elseif (!empty($bundles_intersection)) {
              $collecting_fields_could_have_needed_items = TRUE;
              foreach ($collecting_field_items as $item) {
                if (count($collector_field_field_items) < 40) {
                  $target_node = node_load($item['target_id']);
                  if (in_array($target_node->type, $target_bundles)) {
                    $collector_field_field_items[] = $item['target_id'];
                  }
                }
                else {
                  break;
                }
              }

            }
          }
        }
        if ($collecting_fields_could_have_needed_items) {
          $entity->{$instance['field_name']} = array(
            LANGUAGE_NONE => array(
              0 => array(
                'value' => serialize($collector_field_field_items),
              )
            ),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_data_collector_field_is_empty($item, $field) {
  $empty = !isset($item['value']) || empty($item['value']);
  return $empty;
}


/**
 * Implements hook_field_formatter_view()
 */
function field_data_collector_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'field_data_collector_entityreference_formatter' && !empty($items)) {

    $formatter_settings = $display['settings']['content_types_settings'];
    $settings = array();
    foreach ($formatter_settings as $bundle => $bundle_settings) {
      $preset = field_data_collector_load_preset($bundle_settings['bundle_preset']);
      if (isset($preset['settings'])) {
        $settings[$bundle] = $preset['settings'];
      }
    }

    foreach ($items as $delta => $item) {
      $target_entity = isset($item['entity']) ? $item['entity'] : NULL;

      if (!empty($target_entity)) {

        if (isset($settings[$target_entity->type]['primary_media_field'])
          && $settings[$target_entity->type]['primary_media_field'] != 'none' &&
          property_exists($target_entity, $settings[$target_entity->type]['primary_media_field'])
        ) {
          $primary_media_field_items = field_get_items($field['settings']['target_type'], $target_entity, $settings[$target_entity->type]['primary_media_field'], $langcode);
          if (!empty($primary_media_field_items)) {
            $primary_media = $primary_media_field_items[0]['value'];
            $primary_media_formatter_settings = isset($settings[$target_entity->type]['primary_media_values_fields_with_formatters'][$primary_media])
              ? $settings[$target_entity->type]['primary_media_values_fields_with_formatters'][$primary_media]
              : array();
          }
        }
        else {
          $primary_media_formatter_settings = isset($settings[$target_entity->type]['primary_media_values_fields_with_formatters']['default'])
            ? $settings[$target_entity->type]['primary_media_values_fields_with_formatters']['default']
            : array();
        }
        //Get the array of display fields
        $display_fields_with_settings = isset($primary_media_formatter_settings['fields_and_formatters'])
          ? $primary_media_formatter_settings['fields_and_formatters']
          : array();
        //Sort the display fields by weight
        usort($display_fields_with_settings, '_field_data_collector_fields_with_settings_compare_by_weight');

        //Display all fields with needed formatters and settings
        foreach ($display_fields_with_settings as $display_field_settings) {
          $field_output = '';
          $ref_field_name = isset($display_field_settings['field_for_value'])
            ? $display_field_settings['field_for_value']
            : "";
          //If the user choose the title as field to display
          if ($ref_field_name == 'title') {
            if ($display_field_settings['field_label']) {
              $field_output .= '<div class="field-label">Title: </div>';
            }
            if ($uri = entity_uri('node', $target_entity)) {
              $field_output .= '<div class="field-data">' . l($target_entity->title, $uri['path'], $uri['options']) . '</div>';
            }
            else {
              $field_output .= '<div class="field-data">' . check_plain($target_entity->title) . '</div>';
            }
          }
          //If the user choose any other field to display
          else {
            $ref_field_formatter_name = isset($display_field_settings['formatter_for_field']['formatter'])
              ? $display_field_settings['formatter_for_field']['formatter']
              : "";

            $ref_field_formatter_settings = isset($display_field_settings['formatter_for_field']['formatter_settings']['settings'])
              ? $display_field_settings['formatter_for_field']['formatter_settings']['settings']
              : "";

            if (!empty($ref_field_name) && !empty($ref_field_formatter_name) && !empty($ref_field_formatter_settings)) {


              $ref_entity_type = $field['settings']['target_type'];
              $ref_entity = $target_entity;
              $ref_langcode = $langcode;
              $ref_field = field_info_field($ref_field_name);

              $ref_instance = field_info_instance($ref_entity_type, $ref_field_name, $target_entity->type);

              $ref_display = field_get_display($ref_instance, 'default', $ref_entity);
              $ref_items = field_get_items($ref_entity_type, $ref_entity, $ref_field_name, $ref_langcode);

              $ref_field_formatter = field_info_formatter_types($ref_field_formatter_name);

              $ref_display['module'] = $ref_field_formatter['module'];
              $ref_display['type'] = $ref_field_formatter_name;
              $ref_display['settings'] = $ref_field_formatter_settings;

              $ref_instance['display']['default'] = $ref_display;

              if (!empty($ref_items)) {
                if ($display_field_settings['field_label']) {
                  $field_output .= '<div class="field-label">' . $ref_instance['label'] . ': </div>';
                }
                $field_data = module_invoke($ref_display['module'], 'field_formatter_view', $ref_entity_type, $ref_entity, $ref_field, $ref_instance, $ref_langcode, $ref_items, $ref_display);

                $field_output .= '<div class="field-data">' . drupal_render($field_data) . '</div>';

                //$element[$delta][] = module_invoke($ref_display['module'], 'field_formatter_view', $ref_entity_type, $ref_entity, $ref_field, $ref_instance, $ref_langcode, $ref_items, $ref_display);
              }
            }
          }
          if (!empty($field_output)) {
            $element[$delta][] = array(
              '#markup' => $field_output,
              '#prefix' => '<div class="field-info">',
              '#suffix' => '</div>',
            );
          }
        }
      }
    }
  }
  if ($display['type'] == 'field_data_collector_default_formatter') {

    foreach ($items as $delta => $item) {
      $target_entity = isset($item['entity']) ? $item['entity'] : NULL;
      if (!empty($target_entity)) {
        $label = $target_entity->title;
        // If the link is to be displayed and the entity has a uri, display a link.
        // Note the assignment ($url = ) here is intended to be an assignment.
        if (($uri = entity_uri($field['settings']['target_type'], $target_entity))) {
          $element[$delta] = array('#markup' => l($label, $uri['path'], $uri['options']));
        }
        else {
          $element[$delta] = array('#markup' => check_plain($label));
        }
      }
    }
  }

  return $element;

}

/**
 * Comparator for sorting the array of display fields in the primary media formatter settings
 *
 * @param $a
 * @param $b
 * @return int
 */
function _field_data_collector_fields_with_settings_compare_by_weight($a, $b) {
  if (isset($a['weight']) && isset($b['weight'])) {
    if ($a['weight'] == $b['weight']) {
      return 0;
    }
    else {
      return ($a['weight'] < $b['weight']) ? -1 : 1;
    }
  }
  else {
    return 1;
  }


}


/**
 * Implements hook_field_formatter_prepare_view().
 */
function field_data_collector_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $target_ids = array();
  $unserialized_items = array();

  // Collect every possible entity attached to any of the entities.
  foreach ($entities as $id => $entity) {
    //If the field_data_collector field was added into the bundle when some content
    // has been already existed we sould also generate the data for the field.
    $unserialized_items[$id] = array();
    if ($entity_type == 'node' && $entity->changed <= $field['settings']['last_changes_time']) {
      node_save($entity);
      $items[$id] = field_get_items($entity_type, $entity, $field['field_name'], $langcode);
    }

    foreach ($items[$id] as $delta => $item) {
      if (isset($item['value'])) {
        $tmp_items = unserialize($item['value']);
        $unserialized_items[$id] = array_merge($unserialized_items[$id], $tmp_items);
        $target_ids = array_merge($target_ids, $tmp_items);
      }
    }
  }

  if ($target_ids) {
    $target_entities = entity_load($field['settings']['target_type'], $target_ids);
    foreach ($entities as $id => $entity) {
      foreach ($unserialized_items[$id] as $delta => $target_id) {
        // Check whether the referenced entity could be loaded.
        if (isset($target_entities[$target_id])) {
          // Replace the instance value with the term data.
          $items[$id][$delta]['entity'] = $target_entities[$target_id];
          //Emulate the standart entity reference items strucuture to have the possibility
          // to use the standart entityreference formatters
          $items[$id][$delta]['target_id'] = $target_id;
          // Check whether the user has access to the referenced entity.
          //  $items[$id][$delta]['access'] = entity_access('view', $field['settings']['target_type'], $target_entities[$target_id]);
        }
      }
    }
  }

}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_data_collector_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings']['content_types_settings'];
  $target_type = 'node';
  $target_bundles = $field['settings']['target_bundles'];

  $form['content_types_settings'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#attributes' => array(
      'id' => 'field_data_collector_formatter_settings',
    ),
  );

  if (!empty($target_bundles)) {

    foreach ($target_bundles as $target_bundle => $target_bundle_widget_value) {

      // Display the form for the bundle if the bundle have at least on field which could be primary field
      $form['content_types_settings'][$target_bundle] = array(
        '#title' => t($target_bundle . ' preset settings'),
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#description' => t('Chose the preset for current bundle'),
      );

      $default_preset = isset($settings[$target_bundle]['bundle_preset']) ? $settings[$target_bundle]['bundle_preset'] : 'none';

      $optional_presets[$target_bundle] = array('none' => '-None-');
      $optional_presets[$target_bundle] += field_data_collection_load_presets_for_bundle($target_bundle);

      if (count($optional_presets[$target_bundle]) > 1) {
        $entity_info = entity_get_info($target_type);
        $form['content_types_settings'][$target_bundle]['bundle_preset'] = array(
          '#title' => t('Chose the preset for ' . $bundle_label = $entity_info['bundles'][$target_bundle]['label']),
          '#description' => t('Choose the predefined preset with settings for current bundle.'),
          '#tree' => TRUE,
          '#type' => 'select',
          '#options' => $optional_presets[$target_bundle],
          '#default_value' => $default_preset,
        );
      }

      else {
        $form['content_types_settings'][$target_bundle]['no_preset_message'] = array(
          '#markup' => '<div class="messages warning">' . t('No presets are available. You must to <a href="@create">create a preset</a> to proceed.', array('@create' => url('admin/config/media/field-data-collector-presets/add'))) . '</div>',
          '#tree' => TRUE,
        );
      }
    }
  }
  else {
    $bundles = field_info_bundles($target_type);
    if (isset($bundles[$instance['bundle']])) {
      $bundle_info = $bundles[$instance['bundle']];
      if (isset($bundle_info['admin'])) {
        $admin_path = isset($bundle_info['admin']['real path']) ? $bundle_info['admin']['real path'] : $bundle_info['admin']['path'];
      }

      $form['field_settings_is_empty'] = array(
        '#markup' => '<div class="messages warning">'
        . t('The bundles did not set at the field settings. You need to set them on the <a href="@field_settings_page">field edit page</a> to proceed.',
          array('@field_settings_page' => url($admin_path . '/fields/' . $field['field_name']))
        ) . '</div>',
      );
    }
    else {
      $form['field_settings_is_empty'] = array(
        '#markup' => '<div class="messages warning">'
        . t('The bundles did not set at the field settings. You need to set them on the field edit page to proceed.')
        . '</div>',
      );
    }
  }

  return $form;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_data_collector_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  $summary = '';

  if ($display['type'] == 'field_data_collector_entityreference_formatter') {

    $settings = $display['settings']['content_types_settings'];
    $entity_info = entity_get_info('node');
    foreach ($settings as $bundle => $bundle_settings) {
      $bundle_label = $entity_info['bundles'][$bundle]['label'];
      $summary .= "For bundle " . $bundle_label . " ";
      $preset_name = $bundle_settings['bundle_preset'];
      $preset = field_data_collector_load_preset($preset_name);
      $summary .= $preset['summary'];
    }

    if (empty($settings)) {
      $summary = 'No settings was predefined';
    }
  }

  return $summary;
}
