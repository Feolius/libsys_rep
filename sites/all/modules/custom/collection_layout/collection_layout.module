<?php

require_once 'collection_layout_filters.inc';

function collection_layout_block_info() {
    $blocks = array();
    $blocks['files_filter_block'] = array(
        'info' => t('Block for filters'),
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

function collection_layout_menu() {
    $items = array();
    $items['collection'] = array(
        'title' => 'Collection',
        'access callback' => TRUE,
        'page callback' => 'collection_layout_collection_page_callback',
        'type' => MENU_CALLBACK,
    );
    $items['node-page'] = array(
        'access callback' => TRUE,
        'page callback' => 'collection_layout_node_page_callback',
        'type' => MENU_CALLBACK,
    );
    $items['timeline-json'] = array(
        'access callback' => TRUE,
        'page callback' => 'collection_layout_timeline_json_callback',
        'type' => MENU_CALLBACK,
    );
    $items['timeline-iframe'] = array(
        'title' => 'asdasdasdsd',
        'access callback' => TRUE,
        'page callback' => 'collection_layout_timeline_frame_callback',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function collection_layout_collection_page_callback() {

    drupal_add_css(drupal_get_path('module', 'collection_layout') . '/css/collection_page_style.css');
    drupal_add_library('system', 'ui.dialog');
    if (!isset($_SESSION['collection_layout']['date']['min']))
        $_SESSION['collection_layout']['date']['min'] = 1000;
    if (!isset($_SESSION['collection_layout']['date']['max']))
        $_SESSION['collection_layout']['date']['max'] = 2050;

    foreach ($_GET as $key => $value) {
        if (collection_layout_is_filter($key))
            collection_layout_add_filter_value($key, $value);
    }
    $doc_type = collection_layout_get_filter_value('document_type');
    $doc_type_filter_string = $doc_type ? implode('+', $doc_type) : 'all';

    $collection = collection_layout_get_filter_value('collection');
    $collection_filter_string = $collection ? implode('+', $collection) : 'all';

    $category = collection_layout_get_filter_value('category');
    $category_filter_string = $category ? implode('+', $category) : 'all';

    $group = collection_layout_get_filter_value('group');
    $group_filter_string = $group ? implode('+', $group) : 'all';

    $date = collection_layout_get_filter_value('date');
    $date_range_filter_string = isset($date['min']) ? "{$date['min']}--{$date['max']}" : 'all';
    $date_filter_string = isset($date['year']) ? $date['year'] : 'all';

    $view_type = collection_layout_get_filter_value('view_type');

    $display = '';
    switch ($view_type) {
        case 1:
            $display = 'list';
            break;
        case 2:
            $display = 'condensed_list';
            break;
        case 3:
            $display = 'grid';
            break;
        case 4:
            $display = 'timeline';
            views_embed_view('timeline_json_view', 'timeline_json', $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string);
            break;
        default :
            $display = 'list';
    }

    $result = $display != 'timeline' ? views_embed_view('collection_view', $display, $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string) :
            theme('timeline_iframe');

    return $result;
}

function collection_layout_contents($which_block) {
    switch ($which_block) {
        case 'files_filter_block':
            $elements = array();
            $elements[''];
            return $elements;
        default :
            return;
    }
}

function collection_layout_block_view($delta = '') {
    if (!isset($_SESSION['collection_layout']['date']['min']))
        $_SESSION['collection_layout']['date']['min'] = 1000;
    if (!isset($_SESSION['collection_layout']['date']['max']))
        $_SESSION['collection_layout']['date']['max'] = 2050;
    drupal_add_library('system', 'ui.slider');
    drupal_add_js(drupal_get_path('module', 'collection_layout') . '/js/date_slider.js');
    drupal_add_js(array('collection_layout' => array(
            'date_min' => $_SESSION['collection_layout']['date']['min'],
            'date_max' => $_SESSION['collection_layout']['date']['max'],
            )), 'setting');
    drupal_add_css(drupal_get_path('module', 'collection_layout') . '/css/filter_block.css');
    $refine = array();
    $filter_list = collection_layout_get_enable_filters_list();

    foreach ($filter_list as $fid => $val) {
        if ($fid != 'date') {
            if ($fid != 'view_type')
                if (is_array($val))
                    foreach ($val as $tid) {
                        $refine[$fid] = l(collection_layout_get_filter_human_name($fid) . ': ' . collection_layout_get_term_name($tid) . '[X]', 'collection', array(
                            'query' => array(
                                $fid => $tid
                                )));
                    } else {
                    $refine[$fid] = l(collection_layout_get_filter_human_name($fid) . ': ' . collection_layout_get_term_name($val) . '[X]', 'collection', array(
                        'query' => array(
                            $fid => $val
                            )));
                }
        } else
        if (isset($val['year'])) {
            $refine[$fid] = l($val['year'] . '[X]', 'collection', array(
                'query' => array(
                    'date[year]' => $val['year']
                    )));
        }
    }

    $date = collection_layout_get_filter_value('date');
    $date_range_filter_string = isset($date['min']) ? "{$date['min']}--{$date['max']}" : 'all';
    $date_filter_string = isset($date['year']) ? $date['year'] : 'all';
    $doc_type = collection_layout_get_filter_value('document_type');
    $doc_type_filter_string = $doc_type ? implode('+', $doc_type) : 'all';
    $category = collection_layout_get_filter_value('category');
    $category_filter_string = $category ? implode('+', $category) : 'all';
    $collection = collection_layout_get_filter_value('collection');
    $collection_filter_string = $collection ? implode('+', $collection) : 'all';
    $group = collection_layout_get_filter_value('group');
    $group_filter_string = $group ? implode('+', $group) : 'all';

    $filters = array(
        'documen_type' => array(
            '#title' => t('Document type'),
            '#content' => views_embed_view('document_type_views', 'page', $date_range_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string)
        ),
        'category' => array(
            '#title' => t('Category'),
            '#content' => views_embed_view('category_view', 'page', $date_range_filter_string, $doc_type_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string)
        ),
        'collection' => array(
            '#title' => t('Collection'),
            '#content' => views_embed_view('collection_view_taxonomy', 'page', $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $group_filter_string, $date_filter_string)
        ),
        'groupe' => array(
            '#title' => t('Groupe'),
            '#content' => views_embed_view('groupe_view', 'page', $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $date_filter_string)
        ),
        'publication_date' => array(
            '#title' => t('Publication Date'),
            '#content' => views_embed_view('collection_view', 'filter_date', $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string)
        )
    );

    $content = array(
        'browsing' => array(
            '#title' => t('Browsing'),
            '#content' => array(
                l(t('List browsing'), 'collection', array('query' => array('view_type' => '1'))),
                l(t('Condensed list browsing'), 'collection', array('query' => array('view_type' => '2'))),
                l(t('Grid browsing'), 'collection', array('query' => array('view_type' => '3'))),
                l(t('Timeline browsing'), 'collection', array('query' => array('view_type' => '4'))),
            )
        ),
        'publication_date_range' => array(
            '#title' => t('Publication date'),
            '#content' => '<div id="slider-date-range"></div>'
        ),
        'refine' => array(
            '#title' => t('Refine'),
            '#content' => $refine
        ),
        'filters' => $filters
    );

    $block = array(
        'subject' => t(''),
        'content' => theme('filter_block', array('elements' => $content))
    );
    return $block;
}

function collection_layout_field_formatter_info() {
    return array(
        'collection_layout_date_link' => array(
            'label' => t('Collection Layout Date Link'),
            'field types' => array('date', 'datestamp', 'datetime'),
        ),
        'colletion_layout_title_link' => array(
            'label' => t('Collection Layout Title Link'),
            'field types' => array('text'),
        ),
        'colletion_layout_title_link_small' => array(
            'label' => t('Collection Layout Title Link Small'),
            'field types' => array('text'),
        ),
    );
}

function collection_layout_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
    switch ($display['type']) {
        case 'collection_layout_date_link':
            foreach ($items as $delta => $item) {
                $year = explode('-', $item['value']);
                $year = $year[0];
                $element[$delta] = array(
                    '#type' => 'markup',
                    '#markup' => '<span>' . l($year, 'collection', array(
                        'query' => array(
                            'date[year]' => $year
                        )
                    )) . '</span>'
                );
            }
            break;
        case 'colletion_layout_title_link' :
            foreach ($items as $delta => $item) {
                $element[$delta] = array(
                    '#type' => 'markup',
                    '#markup' => '<h2>' . l($item['value'], 'node-page', array(
                        'query' => array(
                            'nid' => $entity->nid
                        )
                    )) . '</h2>'
                );
            }
            break;
        case 'colletion_layout_title_link_small' :
            foreach ($items as $delta => $item) {
                $element[$delta] = array(
                    '#type' => 'markup',
                    '#markup' => l($item['value'], 'node-page', array(
                        'query' => array(
                            'nid' => $entity->nid
                        )
                    ))
                );
            }
            break;
    }
    return $element;
}

function collection_layout_views_api() {
    return array(
        'api' => 3,
    );
}

function collection_layout_node_page_callback() {

    drupal_add_css(drupal_get_path('module', 'collection_layout') . '/css/msft-metro-buttons.css');
    drupal_add_css(drupal_get_path('module', 'collection_layout') . '/css/cmmb.css');
    drupal_add_css(drupal_get_path('module', 'collection_layout') . '/css/node_page_style.css');
    drupal_add_js(drupal_get_path('module', 'collection_layout') . '/js/node_slider_buttons.js');
    drupal_add_js(drupal_get_path('module', 'collection_layout') . '/js/node_tabs.js');
    drupal_add_library('system', 'ui.tabs');

    if (isset($_SESSION['collection_layout']['flag']) && $_SESSION['collection_layout']['flag']) {
        unset($_SESSION['collection_layout']['view_result']);
        $_SESSION['collection_layout']['flag'] = 0;
    }

    if (isset($_GET['nid']))
        $_SESSION['collection_layout']['nid'] = $_GET['nid'];

    $doc_type = collection_layout_get_filter_value('document_type');
    $doc_type_filter_string = $doc_type ? implode('+', $doc_type) : 'all';

    $collection = collection_layout_get_filter_value('collection');
    $collection_filter_string = $collection ? implode('+', $collection) : 'all';

    $category = collection_layout_get_filter_value('category');
    $category_filter_string = $category ? implode('+', $category) : 'all';

    $group = collection_layout_get_filter_value('group');
    $group_filter_string = $group ? implode('+', $group) : 'all';

    $date = collection_layout_get_filter_value('date');
    $date_range_filter_string = isset($date['min']) ? "{$date['min']}--{$date['max']}" : 'all';
    $date_filter_string = isset($date['year']) ? $date['year'] : 'all';
    views_embed_view('timeline_json_view', 'timeline_json', $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string);

    $content = array(
        '#information' => array(
            '#title' => t('General'),
            '#content' => array(
                '#view' => views_embed_view('node_view', 'inf', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
                '#timeline_iframe' => theme('timeline_iframe')
            )
        ),
        '#image' => array(
            '#title' => t('Image'),
            '#content' => array(
                '#view' => views_embed_view('node_view', 'image_deep_zoom', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
            )
        ),
        '#media' => array(
            '#title' => t('Media'),
            '#content' => array(
                '#view' => views_embed_view('node_view', 'media', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
            )
        ),
        '#text' => array(
            '#title' => t('Book'),
            '#content' => array(
                'flexpaper' => array(
                    '#view' => views_embed_view('node_view', 'book_flexpaper', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
                    '#title' => t('Flexpaper')
                ),
                'google_docs' => array(
                    '#view' => views_embed_view('node_view', 'book_google_docs', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
                    '#title' => t('Google Docs')
                ),
                'file_link' => array(
                    '#view' => views_embed_view('node_view', 'book_file_link', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
                    '#title' => t('Download')
                )
            )
        ),
        '#slider_links' => array(
            '#left' => views_embed_view('node_view', 'node_prev', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
            '#right' => views_embed_view('node_view', 'node_next', $_SESSION['collection_layout']['nid'], $date_range_filter_string, $doc_type_filter_string, $category_filter_string, $collection_filter_string, $group_filter_string, $date_filter_string),
        )
    );

    return theme('node_page', array('elements' => $content));
}

function collection_layout_timeline_frame_callback() {
    $start_node_index = 0;

    foreach ($_SESSION['collection_layout']['json']['nid'] as $nid)
        if ($nid == $_SESSION['collection_layout']['nid'])
            break;
        else
            $start_node_index++;

    $options = new stdClass();
    $options->start_slide = $start_node_index;
    $options->timeline_lib_url = base_path() . '/' . libraries_get_path('timeline') . '/compiled/js/timeline-embed.js';
    echo theme('timeline_json', array('options' => $options));
    exit;
}

function collection_layout_timeline_json_callback() {

    $date = array();

    for ($i = 0; $i < count($_SESSION['collection_layout']['json']['date']); $i++) {
        $asset = new stdClass();
        if (isset($_SESSION['collection_layout']['json']['image_url']))
            $asset->media = $_SESSION['collection_layout']['json']['image_url'][$i];
        else 
            $asset->media = "";
        $asset->credit = "";
        $asset->caption = "";

        $item = new stdClass();
        $item->headline = $_SESSION['collection_layout']['json']['title'][$i];
        $item->startDate = $_SESSION['collection_layout']['json']['date'][$i];
        $item->text = $_SESSION['collection_layout']['json']['text'][$i];
        $item->asset = $asset;
        $date[] = $item;
    }

    $json_class = new stdClass();
    $json_class->timeline = new stdClass();
    $json_class->timeline->headline = "";
    $json_class->timeline->type = "default";
    $json_class->timeline->startDate = "1000";
    $json_class->timeline->text = "";
    $json_class->timeline->date = $date;

    echo drupal_json_output($json_class);
    exit;
}

function collection_layout_theme() {
    return array(
        'filter_block' => array(
            'template' => 'theme/filters-block',
        ),
        'node_page' => array(
            'template' => 'theme/node-page',
        ),
        'timeline_json' => array(
            'template' => 'theme/timeline-json-page',
            'arguments' => array(
                'options' => null,
            ),
        ),
        'timeline_iframe' => array(
            'template' => 'theme/timeline-iframe-page',
        )
    );
}

function collection_layout_preprocess_timeline_json(&$vars) {
    $options = $vars['options'];
    $vars['start_slide'] = $options->start_slide;
    $vars['timeline_lib_url'] = $options->timeline_lib_url;
    $vars['source'] = base_path() . '/timeline-json';
}

function collection_layout_preprocess_timeline_iframe(&$vars) {
    $vars['iframe_url'] = 'timeline-iframe';
    $vars['iframe_width'] = '100%';
    $vars['iframe_height'] = '600px';
}