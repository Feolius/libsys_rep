<?php

/**
 * Implements hook_menu().
 */
function egw_oauth_menu() {
  $items['auth'] = array(
    'page callback' => 'egw_oauth_authorized',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['auth/authorized'] = array(
    'page callback' => 'egw_oauth_token_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['auth/login'] = array(
    'page callback' => 'egw_oauth_login_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_oauth2_clients().
 */
function egw_oauth_oauth2_clients() {
  $server_url = 'https://egwwritings.org/api/stable/auth';
  $oauth2_clients['egwwritings'] = array(
    'token_endpoint' => $server_url . '/token',
    'auth_flow' => 'server-side',
    'redirect_uri' => 'http://library.ellenwhite.org/auth/',
    'authorization_endpoint' => $server_url,
    'client_id' => 'RfznKiGZzQTHzrnZFi6tNSEbrb3bhzE3F3deaK5znK7K3iytzrN87eakh3ntkTfS',
    'client_secret' => 'HkZHZQ79k5Hbb6yBh8zedzskkGFAnQeZ35yNGsKYhhZkdfNkd8tfyKyHf38yEbfs',
    'scope' => 'user_info',
  );

  return $oauth2_clients;
}



/**
 * Callback for path auth/authorized.
 *
 * An authorized request in server-side flow
 * will be redirected here (having variables
 * 'code' and 'state').
 */
function egw_oauth_authorized() {
  // If there is any error in the server response, display it.
  if (isset($_GET['error'])) {
    $error = $_GET['error'];
    $error_description = $_GET['error_description'];
    drupal_set_message("Error: $error: $error_description", 'error');
  }

  // Redirect to the client that started the authentication.
  OAuth2\Client::redirect($clean = FALSE);
}

function egw_oauth_login_callback() {
    try {
      $oauth2_client = oauth2_client_load('egwwritings');
      $access_token = $oauth2_client->getAccessToken();
    } catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
}

function egw_oauth_token_callback() {
  if (isset($_GET['error'])) {
    $error = $_GET['error'];
    $error_description = $_GET['error_description'];
    drupal_set_message("Error: $error: $error_description", 'error');
    drupal_goto('user');
  }
  $client_id = 'RfznKiGZzQTHzrnZFi6tNSEbrb3bhzE3F3deaK5znK7K3iytzrN87eakh3ntkTfS';
  $client_secret = 'HkZHZQ79k5Hbb6yBh8zedzskkGFAnQeZ35yNGsKYhhZkdfNkd8tfyKyHf38yEbfs';
  $options = array(
    'method' => 'POST',
    'data' => http_build_query(array(
      'grant_type' => 'authorization_code',
      'code' => $_GET['code'],
      'client_id' => $client_id,
      'client_secret' => $client_secret,
      'redirect_uri' => 'http://library.ellenwhite.org/auth/',
    )),
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
      'Authorization' => 'Basic ' . base64_encode("$client_id:$client_secret"),
    ),
  );
  $token_endpoint = 'https://egwwritings.org/api/stable/auth/token/';
  $result = drupal_http_request($token_endpoint, $options);
  if ($result->code != 200) {
    $error_data = json_decode($result->data);
    drupal_set_message("Error: $error_data->error: $error_data->error_description", 'error');
  }
  $token = json_decode($result->data);

  $options = array(
    'method' => 'POST',
    'data' => http_build_query(array(
      'client_id' => $client_id,
      'client_secret' => $client_secret,
      'token_type' => $token->token_type,
    )),
    'headers' => array(
      'Authorization' => 'Bearer ' . $token->access_token,
    ),
  );
  $token_endpoint = 'https://egwwritings.org/api/2.3/info/';
  $login_cred = drupal_http_request($token_endpoint, $options);
  if ($login_cred->code != 200) {
    $error_data = json_decode($result->data);
    drupal_set_message("Error: $error_data->error: $error_data->error_description", 'error');
  }
  $user_cred = json_decode($login_cred->data);
  if ($user_cred->email) {
    $query = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('u.status', 1)
      ->condition('u.mail', $user_cred->email);
    $result = $query->execute()->fetchObject();
  }
  if ($result) {
    global $user;
    $user = user_load($result->uid);
    drupal_session_regenerate();
    drupal_goto('user');
  }
  else {
    $edit = array(
      'name' => egw_oauth_username_generate($user_cred->username),
      'mail' => $user_cred->email,
      'pass' => user_password(),
      'status' => 1,
    );
    $account = user_save(drupal_anonymous_user(), $edit);
    // Manually set the password so it appears in the e-mail.
    $account->password = $edit['pass'];

    // Send the e-mail through the user module.
    drupal_mail('user', 'register_no_approval_required', $user_cred->email, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example..com'));
    global $user;
    $user = $account;
    drupal_session_regenerate();
    drupal_goto('user');

  }
}

function egw_oauth_username_generate($name) {
  $counter = 0;
  while (user_load_by_name($name)) {
    $counter++;
    $name = $name . ' ' . $counter;
  }
  $username = $name;
  return $username;
}

/**
 * Implements hook_form_alter().
 */
function egw_oauth_form_alter(&$form, &$form_state, $form_id) {
  /*
  if ($form_id == 'user_login') {
    $form['from'] = array(
      '#type' => 'item',
      '#title' => t('Or log in with egwwritings.org account'),
      '#markup' => l(t('Log in'), 'auth/login'),
      '#description' => t('If you do not have an account on our site it will automatically be created')
    );
  }
  */
}