<?php

/**
 * Implements hook_element_info().
 */
function book_field_element_info() {
  $file_path = drupal_get_path('module', 'file');
  $types['managed_book'] = array(
    '#input' => TRUE,
    '#process' => array('book_field_managed_book_process'),
    '#value_callback' => 'book_field_managed_book_value',
    '#pre_render' => array('book_field_managed_book_pre_render'),
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'bar',
    '#progress_message' => NULL,
    '#upload_validators' => array(),
    '#upload_location' => NULL,
    '#size' => 22,
    '#extended' => FALSE,
    '#attached' => array(
      'css' => array($file_path . '/file.css'),
      'js' => array($file_path . '/file.js'),
    ),
  );
  return $types;
}

/**
 * Implements hook_menu().
 */
function book_field_menu() {
  $items = array();
  $items['book_field/progress'] = array(
    'page callback' => 'book_field_ajax_progress',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK
  );
  $items['flexpaper/desktop_toolbar'] = array(
    'page callback' => 'book_field_desktop_toolbar',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['flexpaper/mobile_toolbar'] = array(
    'page callback' => 'book_field_mobile_toolbar',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Menu callback for flexpaper desktop toolbar. Return desktop version of html toolbar.
 */
function book_field_desktop_toolbar($viewer_id) {
  global $base_url;
  $lib_path = libraries_get_path('flexpaper');
  $image_path = url($lib_path . '/images/');
  $out = theme('flexpaper_desktop_toolbar', array('viewer_id' => $viewer_id, 'image_path' => $image_path));
  print $out;
  exit;
}

/**
 * Menu callback for flexpaper mobile toolbar. Return desktop version of html toolbar.
 */
function book_field_mobile_toolbar($viewer_id) {
  global $base_url;
  $lib_path = libraries_get_path('flexpaper');
  $image_path = url($lib_path . '/images/');
  $out = theme('flexpaper_mobile_toolbar', array('viewer_id' => $viewer_id, 'image_path' => $image_path));
  print $out;
  exit;
}

/**
 * Menu callback for upload progress.
 *
 * @param $key
 *   The unique combination of upload key, swf and png converting progress keys.
 */
function book_field_ajax_progress($key) {
  $key = explode('_', $key);
  $upload_key = $key[0];
  $swf_progress_key = $key[1];
  $png_progress_key = $key[2];
  $progress = _book_field_progress_get_info($upload_key, $swf_progress_key, $png_progress_key);
  drupal_json_output($progress);
}

/**
 * Get information about current state of progress in upload and conversion
 */
function _book_field_progress_get_info($upload_key, $swf_progress_key, $png_progress_key) {
  $progress['message'] = '';
  $progress['percentage'] = -1;
  $swf_result = db_query('SELECT progress FROM {progress} WHERE pid = :pid', array(
    ':pid' => $swf_progress_key
  ));
  $png_result = db_query('SELECT progress FROM {progress} WHERE pid = :pid', array(
    ':pid' => $png_progress_key
  ));
  $swf_info = $swf_result->fetchAll();
  $png_info = $png_result->fetchAll();
  if ($swf_info == NULL && $png_info == NULL) {
    if ($upload_key != 0) {
      $progress = array(
        'message' => t('Starting upload...'),
        'percentage' => -1,
      );
      $status = uploadprogress_get_info($upload_key);
      if (isset($status['bytes_uploaded']) && !empty($status['bytes_total'])) {
        $progress['message'] = t('Uploading... (@current of @total)', array(
          '@current' => format_size($status['bytes_uploaded']),
          '@total' => format_size($status['bytes_total'])
        ));
        $progress['percentage'] = round(100 * $status['bytes_uploaded'] / $status['bytes_total']);
      }
    }
    else {
      $progress = array(
        'message' => t('Uploading...'),
        'percentage' => -1,
      );
    }
  }
  elseif ($swf_info != NULL && $png_info == NULL) {
    if ($swf_info[0]->progress == -1) {
      $progress = array(
        'message' => t('Preparing conversion to swf...'),
        'percentage' => 0,
      );
    }
    else {
      $status = ($swf_info[0]->progress);
      $status = explode('/', $status);
      $current_page = $status[0];
      $last_page = $status[1];
      $progress['message'] = t('Converting swfs... (@current of @total)', array(
        '@current' => $current_page,
        '@total' => $last_page
      ));
      $progress['percentage'] = round(100 * $current_page / $last_page);
    }
  }
  else {
    if ($png_info[0]->progress == -1) {
      $progress = array(
        'message' => t('Preparing conversion to png...'),
        'percentage' => 0,
      );
    }
    else {
      $status = ($png_info[0]->progress);
      $status = explode('/', $status);
      $current_page = $status[0];
      $last_page = $status[1];
      $progress['message'] = t('Converting pngs... (@current of @total)', array(
        '@current' => $current_page,
        '@total' => $last_page
      ));
      $progress['percentage'] = round(100 * $current_page / $last_page);
    }
  }
  return $progress;

}

/**
 * Count number of pages in PDF file
 */
function getNumPagesPdf($filepath) {
  $stream = @fopen($filepath, "r");
  $PDFContent = @fread($stream, filesize($filepath));
  $firstValue = 0;
  $secondValue = 0;
  if (preg_match("/\/N\s+([0-9]+)/", $PDFContent, $matches)) {
    $firstValue = $matches[1];
  }

  if (preg_match_all("/\/Count\s+([0-9]+)/s", $PDFContent, $matches)) {
    $secondValue = max($matches[1]);
  }
  $max = (($secondValue != 0) ? $secondValue : max($firstValue, $secondValue));
  fclose($stream);
  if ($max == 0) {
    $im = new imagick($filepath);
    $max = $im->getNumberImages();
  }
  return $max;
}

/**
 * The #value_callback for a managed_book type element.
 */
function book_field_managed_book_value(&$element, $input = FALSE, $form_state = NULL) {
  $fid = 0;
  $fid_thumb = 0;
  $folder_name = '';
  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_fid['fid'])) {
    $fid = $form_state_fid['fid'];
  }
  elseif (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Process any input and save new uploads.
  if (!empty($input)) {
    // Uploads take priority over all other values.
    if ($file = file_managed_file_save_upload($element)) {
      $fid = $file->fid;
      $file = file_load($fid);
      //Use filename as folder name
      $folder_name = get_real_file_name($file);
      //We should create a thumbnail for PDF file and make swf files for flexpaper viewer.
      if ($file->filemime == 'application/pdf') {
        //Create directory in temp folder where files will be contained.
        $swf_folder_path = file_directory_temp() . '/' . $folder_name;
        //If directory already exist we should remove it and create new one.
        if (file_prepare_directory($swf_folder_path)) {
          file_unmanaged_delete_recursive($swf_folder_path);
        }
        file_prepare_directory($swf_folder_path, FILE_CREATE_DIRECTORY);
        // Create swf file from pdf.
        if (_book_field_managed_book_create_swf($file, $folder_name, $input['SWF_CONVERSION_IDENTIFIER'])) {
          _book_field_managed_book_create_png($file, $folder_name, $input['PNG_CONVERSION_IDENTIFIER']);
          $fid_thumb = _book_field_managed_book_create_thumbnail($folder_name);
          _book_field_managed_book_create_json($file, $folder_name);
        }
      }
    }
    else {
      // Load file if the FID has changed to confirm it exists.
      if (isset($input['fid']) && $file = file_load($input['fid'])) {
        $fid = $file->fid;
      }
      if (isset($input['fid_thumb']) && $file = file_load($input['fid_thumb'])) {
        $fid_thumb = $file->fid;
      }
      if (isset($input['folder_name'])) {
        $folder_name = $input['folder_name'];
      }
    }
  }
  else {
    $default_fid = isset($element['#default_value']) ? $element['#default_value']['fid'] : 0;
    $default_fid_thumb = isset($element['#default_value']) ? $element['#default_value']['fid_thumb'] : 0;
    $folder_name = isset($element['#default_value']) ? $element['#default_value']['folder_name'] : 0;
    // Confirm that the file exists when used as a default value.
    if ($default_fid && $file = file_load($default_fid)) {
      $fid = $file->fid;
    }
    if ($default_fid_thumb && $file = file_load($default_fid_thumb)) {
      $fid_thumb = $file->fid;
    }
  }

  //Return all fids of pdf, swf and thumbnail files
  $return['fid'] = $fid;
  $return['fid_thumb'] = $fid_thumb;
  $return['folder_name'] = $folder_name;
  return $return;
}

/**
 * Create swf files in temporary folder
 */
function _book_field_managed_book_create_swf($file, $folder_name, $conversion_pid) {
  $path = drupal_realpath($file->uri);
  $swf_folder_path = file_directory_temp() . '/' . $folder_name;
  //Write record in progress table with id of conversion progress. We start conversion
  $record = array('pid' => $conversion_pid, 'progress' => '-1');
  drupal_write_record('progress', $record);

  //Get number of pages
  $numberOfPages = getNumPagesPdf($path);

  //Execute command in pipe to reviewing current progress of conversion
  $command = "/usr/local/bin/pdf2swf '" . $path . "' -o '" . $swf_folder_path . "/" . $folder_name . "%.swf' -f -T 9 -t -s storeallcharacters";
  $handle = popen($command, 'r');

  //Try to make conversion
  while (!feof($handle)) {

    //Check current state every 2 seconds
    sleep(2);
    $read = fread($handle, 2096);

    $pattern = '/(FATAL|ERROR)/i';
    preg_match($pattern, $read, $m);
    if (!empty($m)) {
      drupal_set_message(t("Conversion process was failed. Log info:") . $read, 'error');
      return FALSE;
    }

    //Get current page and write serialized string with current progress in db.
    $pattern = '/page\s(\d+)/';
    preg_match($pattern, $read, $m);
    if (!empty($m[1])) {
      $record = array('pid' => $conversion_pid, 'progress' => $m[1] . '/' . $numberOfPages);
      drupal_write_record('progress', $record, 'pid');
    }
  }
  pclose($handle);
  drupal_set_message(t("Conversion to swf was succesfully completed"), 'status');

  //Remove record from progress table
  db_delete('progress')
    ->condition('pid', $conversion_pid)
    ->execute();
  return TRUE;
}

/**
 * Create png files for each swf files in temporary folder
 */
function _book_field_managed_book_create_png($file, $folder_name, $pid) {
  $path = drupal_realpath($file->uri);
  $folder_path = file_directory_temp() . '/' . $folder_name;
  $record = array('pid' => $pid, 'progress' => '-1');
  drupal_write_record('progress', $record);
  //Get number of swf. It is more reliable than get number of pages in the pdf
  $swf_number = count(scandir($folder_path)) - 2;
  for ($i = 1; $i <= $swf_number; $i++) {
    $command = "/usr/local/bin/swfrender '" . $folder_path . "/" . $folder_name . $i . ".swf' -o '" . $folder_path . "/" . $folder_name . $i . ".png' -X 1024 -s keepaspectratio";
    exec($command);
    //Write record to progress table for each 5 conversions
    if ($i % 5 == 0) {
      $record = array('pid' => $pid, 'progress' => $i . '/' . $swf_number);
      drupal_write_record('progress', $record, 'pid');
    }
  }
  $record = array('pid' => $pid, 'progress' => $swf_number . '/' . $swf_number);
  drupal_write_record('progress', $record, 'pid');
  drupal_set_message(t("Conversion to png was succesfully completed"), 'status');
  //Remove record from progress table
  db_delete('progress')
    ->condition('pid', $pid)
    ->execute();
}

/**
 * Create json file from given pdf
 */
function _book_field_managed_book_create_json($file, $folder_name) {
  $path = drupal_realpath($file->uri);
  $folder_path = file_directory_temp() . '/' . $folder_name;
  $command = "/usr/local/bin/pdf2json '" . $path . "' -enc UTF-8 -compress -hidden '" . $folder_path . "/" . $folder_name . ".js'";
  exec($command);
}

/**
 * Save first png file as thumbnail in Drupal file system
 */
function _book_field_managed_book_create_thumbnail($folder_name) {
  global $user;
  $thumb_uri = 'temporary://' . $folder_name . '/' . $folder_name . "1.png";
  $thumb_path = drupal_realpath($thumb_uri);
  $thumb_file = new stdClass();
  $thumb_file->uid = $user->uid;
  $thumb_file->status = 0;
  $thumb_file->filename = $folder_name . "1.png";
  $thumb_file->uri = $thumb_uri;
  $thumb_file->filemime = 'image/png';
  $thumb_file->filesize = filesize($thumb_path);
  $thumb_file = file_save($thumb_file);
  return $thumb_file->fid;
}

//Process function for managed_book form type.
function book_field_managed_book_process($element, &$form_state, $form) {
  $fid = 0;
  $fid_thumb = 0;
  $folder_name = '';
  if (isset($element['#value']['fid'])) {
    $fid = $element['#value']['fid'];
  }
  if (isset($element['#value']['fid_thumb'])) {
    $fid_thumb = $element['#value']['fid_thumb'];
  }
  if (isset($element['#value']['folder_name'])) {
    $folder_name = $element['#value']['folder_name'];
  }
  $element['#progress_indicator'] = 'bar';
  $element['#file_thumb'] = $fid_thumb ? file_load($fid_thumb) : FALSE;
  $element['#file'] = $fid ? file_load($fid) : FALSE;
  $element['#tree'] = TRUE;
  $ajax_settings = array(
    'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $element['#id'] . '-ajax-wrapper',
    'effect' => 'fade',
    'progress' => array(
      'type' => $element['#progress_indicator'],
      'message' => $element['#progress_message'],
    ),
  );

  // Set up the buttons first since we need to check if they were clicked.
  $element['upload_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_upload_button',
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#validate' => array(),
    '#submit' => array('book_field_managed_book_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );

  // Force the progress indicator for the remove button to be 'throbber'.
  $ajax_settings['progress']['type'] = 'throbber';
  $ajax_settings['progress']['message'] = NULL;
  $ajax_settings['effect'] = 'none';
  $element['remove_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove_button',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    '#submit' => array('book_field_managed_book_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );

  $element['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );
  $element['fid_thumb'] = array(
    '#type' => 'hidden',
    '#value' => $fid_thumb,
  );
  $element['folder_name'] = array(
    '#type' => 'hidden',
    '#value' => $folder_name,
  );

  //Get upload progress key and conversion progress key
  $swf_conversion_progress_key = mt_rand();

  //Get upload progress key and conversion progress key
  $png_conversion_progress_key = mt_rand();

  //Check if upload progress extension is available
  if (extension_loaded('uploadprogress')) {
    $upload_progress_key = mt_rand();
  }
  else {
    $upload_progress_key = 0;
  }
  $element['UPLOAD_IDENTIFIER'] = array(
    '#type' => 'hidden',
    '#value' => $upload_progress_key,
    '#attributes' => array('class' => array('file-progress')),
    // Uploadprogress extension requires this field to be at the top of the
    // form.
    '#weight' => -20,
  );
  $element['SWF_CONVERSION_IDENTIFIER'] = array(
    '#type' => 'hidden',
    '#value' => $swf_conversion_progress_key,
  );
  $element['PNG_CONVERSION_IDENTIFIER'] = array(
    '#type' => 'hidden',
    '#value' => $png_conversion_progress_key,
  );
  $element['upload_button']['#ajax']['progress']['path'] = 'book_field/progress/' . $upload_progress_key . '_' . $swf_conversion_progress_key . '_' . $png_conversion_progress_key;

  // The file upload field itself.
  $element['upload'] = array(
    '#name' => 'files[' . implode('_', $element['#parents']) . ']',
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => $element['#size'],
    '#theme_wrappers' => array(),
    '#weight' => -10,
  );

  if ($element['#file']) {
    $element['filename'] = array(
      '#type' => 'markup',
      '#markup' => theme('file_link', array('file' => $element['#file'])) . ' ',
      '#weight' => -10,
    );
  }
  // Add the extension list to the page as JavaScript settings.
  if (isset($element['#upload_validators']['file_validate_extensions'][0])) {
    $extension_list = implode(',', array_filter(explode(' ', $element['#upload_validators']['file_validate_extensions'][0])));
    $element['upload']['#attached']['js'] = array(
      array(
        'type' => 'setting',
        'data' => array('file' => array('elements' => array('#' . $element['#id'] . '-upload' => $extension_list)))
      )
    );
  }

  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';
  return $element;
}

/**
 * File validator, check if filename contain forbidden special characters
 */
function book_field_validate_filename($file) {
  $errors = array();
  $file_name = $file->filename;
  $check1 = strpos($file_name, '\\');
  $check2 = strpos($file_name, '\'');
  $check3 = strpos($file_name, '|');
  $check4 = strpos($file_name, '%');
  $check = !($check1 || $check2 || $check3 || $check4);
  if ($check == FALSE) {
    $errors[] = t("File name contains forbidden characters(', |, \, %).");
  }
  return $errors;
}

//Submit callback for remove/update button
function book_field_managed_book_submit($form, &$form_state) {
  //We need perform some actions only if submiting button is remove button
  //For upload button all actions perform in value callback
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  if ($button_key == 'remove_button') {
    //Delete files
    if ($element['#file_thumb']) {
      file_delete($element['#file_thumb']);
    }
    if ($element['#file']) {
      file_delete($element['#file']);

      //Remove directory where files was stored
      if ($element['#file']->status == FILE_STATUS_PERMANENT) {
        $folder_name = $element['folder_name']['#value'];
        $directory = file_default_scheme() . '://books/' . $folder_name;
        file_unmanaged_delete_recursive($directory);
      }
    }

    form_set_value($element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $element['#parents'], NULL);

    //Rebuild form
    $form_state['rebuild'] = TRUE;
  }
}

//Pre render  callback for managed_book form type
function book_field_managed_book_pre_render($element) {
  // If we already have a file, we don't want to show the upload controls.
  if (!empty($element['#value']['fid'])) {
    $element['upload']['#access'] = FALSE;
    $element['upload_button']['#access'] = FALSE;
  }
  // If we don't already have a file, there is nothing to remove.
  else {
    $element['remove_button']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Implements hook_field_info().
 */
function book_field_field_info() {
  return array(
    'book_field' => array(
      'label' => t('Book'),
      'description' => t('Prosvides an field for uploading books.'),
      'default_widget' => 'book_field_widget',
      'default_formatter' => 'book_field_formatter',
      'instance_settings' => array(
        'file_extensions' => 'pdf',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function book_field_field_widget_info() {
  return array(
    'book_field_widget' => array(
      'label' => t('Standart book field widget'),
      'field types' => array('book_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function book_field_field_formatter_info() {
  return array(
    'book_field_formatter' => array(
      'label' => t('Book formatter'),
      'field types' => array('book_field'),
    ),
    'book_field_thumbnail_formatter' => array(
      'label' => t('Thumbnail formatter'),
      'field types' => array('book_field'),
      'settings' => array('image_style' => '')
    )
  );
}

/**
 * Implements hook_field_widget_form().
 */
function book_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $defaults = array(
    'fid' => 0,
    'fid_thumb' => 0,
    'folder_name' => ''
  );
  $allowed_extensions = $instance['settings']['file_extensions'];
  $widget = $instance['widget'];
  switch ($widget['type']) {
    case 'book_field_widget':
      $element['fids'] = array(
        '#title' => t('Upload book'),
        '#description' => 'Book uploading',
        '#type' => 'managed_book',
        '#upload_validators' => array(
          'file_validate_extensions' => array($allowed_extensions),
          'book_field_validate_filename' => array(),
        ),
        '#default_value' => !empty($items) ? $items[0] : $defaults,
      );
      $element['fid'] = array(
        '#type' => 'hidden',
        '#value_callback' => 'book_field_widget_fid_value',
      );
      $element['fid_thumb'] = array(
        '#type' => 'hidden',
        '#value_callback' => 'book_field_widget_fid_thumb_value',
      );
      $element['folder_name'] = array(
        '#type' => 'hidden',
        '#value_callback' => 'book_field_widget_folder_name_value',
      );
      return $element;
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function book_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'book_field_thumbnail_formatter') {
    $image_styles = image_style_options(FALSE);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function book_field_field_formatter_settings_summary($field, $instance, $view_mode){
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($display['type'] == 'book_field_thumbnail_formatter') {
    $image_styles = image_style_options(FALSE);
    unset($image_styles['']);
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }
  }
  return implode('<br />', $summary);
}

/**
 * Callback value for folder_name element in widget form
 */
function book_field_widget_folder_name_value(&$element, $input = FALSE, $form_state) {
  $return = '';
  if (isset($form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['folder_name'])) {
    $return = $form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['folder_name'];
  }
  return $return;
}

/**
 * Callback value for fid element in widget form
 */
function book_field_widget_fid_value(&$element, $input = FALSE, $form_state) {
  $return = '0';
  if (isset($form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['fid'])) {
    $return = $form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['fid'];
  }
  return $return;
}

/**
 * Callback value for fid_thumb element in widget form
 */
function book_field_widget_fid_thumb_value(&$element, $input = FALSE, $form_state) {
  $return = '0';
  if (isset($form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['fid_thumb'])) {
    $return = $form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]]['fids']['fid_thumb'];
  }
  return $return;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function book_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $extensions = str_replace(' ', ', ', $settings['file_extensions']);
  $form['file_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed file extensions'),
    '#default_value' => $extensions,
    '#description' => t('Separate extensions with a space or comma and do not include the leading dot.'),
    '#element_validate' => array('_file_generic_settings_extensions'),
    '#weight' => 1,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_field_formatter_view().
 */
function book_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  $element = array();
  if ($display['type'] == 'book_field_formatter') {
    foreach ($items as $delta => $item) {
      //If swf files was created, we should show it in flexpaper.
      if ($item['fid'] != 0) {
        $file = file_load($item['fid']);
        if ($file->filemime == 'application/pdf') {
          //If we have pdf file then we should show it in flexpaper
          $lib_path = libraries_get_path('flexpaper');
          $FlexPaperViewerPath = $base_url . '/' . $lib_path . '/FlexPaperViewer';
          $flexpaper_desktop_html_path = url('flexpaper/desktop_toolbar', array('absolute' => TRUE));
          $flexpaper_mobile_html_path = url('flexpaper/mobile_toolbar', array('absolute' => TRUE));
          $lib_js_path = $lib_path . '/js/';
          $lib_css_path = $lib_path . '/css/';
          $lib_locale_path = $lib_path . '/locale/';
          $file = file_load($item['fid']);
          $file_path = drupal_realpath($file->uri);
          $num_pages = getNumPagesPdf($file_path);
          $swf_directory = file_default_scheme() . '://books/' . $item['folder_name'];
          $path = drupal_realpath($swf_directory);
          $drupal_folder = realpath('.');
          $relative_path = str_replace($drupal_folder, "", $path);
          $file_name = get_real_file_name($file);
          $swf_path = url($relative_path . '/{' . $file_name . '[*,0].swf,' . $num_pages . '}', array('absolute' => TRUE));

          //@TODO Remove this code block when issue with symbol '_' in import will be resolved
          $file_thumbnail = file_load($item['fid_thumb']);
          $file_thumbnail_name = get_real_file_name($file_thumbnail);
          $thumbnail_suffix = str_replace($file_name, '', $file_thumbnail_name);
          if (!strpos($thumbnail_suffix, '_')) {
            $png_path = url($relative_path . '/' . $file_name . '{page}.png', array('absolute' => TRUE));
          }
          else {
            $png_path = url($relative_path . '/' . $file_name . '_{page}.png', array('absolute' => TRUE));
          }
          $json_path = url($relative_path . '/' . $file_name . '.js', array('absolute' => TRUE));
          $extension = _book_field_get_file_extension($file);
          $pdf_path = url($relative_path . '/' . $file_name . '.' . $extension, array('absolute' => TRUE));
          $module_path = drupal_get_path('module', 'book_field');
          if (isset($_GET['view_mode'])) {
            $view_mode = $_GET['view_mode'];
          }
          else {
            $view_mode = 'default';
          }
          switch ($view_mode) {
            case 'html5':
              $rendering_order = 'html5,html';
              break;
            case 'flash':
              $rendering_order = 'flash,html';
              break;
            case 'html':
              $rendering_order = 'html,html';
              break;
            default:
              $rendering_order = 'html5,flash,html';
          }
          $settings = array(
            'swfPaths' => array(urldecode($swf_path)),
            'pngPaths' => array(urldecode($png_path)),
            'jsonPaths' => array(urldecode($json_path)),
            'pdfPaths' => array(urldecode($pdf_path)),
            'FlexPaperViewerPath' => $FlexPaperViewerPath,
            'desktopHTMLPath' => $flexpaper_desktop_html_path,
            'mobileHTMLPath' => $flexpaper_mobile_html_path,
            'jsDirectory' => url($lib_js_path),
            'cssDirectory' => url($lib_css_path),
            'localeDirectory' => url($lib_locale_path),
            'renderingOrder' => $rendering_order
          );
          drupal_add_js(array('book_field' => $settings), 'setting');
          $element[$delta] = array(
            'flexpaper' => array(
              '#attached' => array(
                'css' => array($module_path . '/css/book_field.css', $lib_css_path . 'flexpaper.css'),
                'js' => array(
                  $lib_js_path . "jquery.extensions.min.js",
                  $lib_js_path . 'flexpaper.js',
                  $lib_js_path . 'flexpaper_handlers.js',
                  $module_path . '/js/book_field.js'
                ),
              ),
              '#theme' => 'book_field_flexpaper_view',
              '#file' => $file,
            )
          );
//
          //Determine if we need highlighting
          if (isset($_GET['query'])) {
            $query = $_GET['query'];
            $query_parts = explode(' AND ', $query);
            foreach ($query_parts as $query_part) {
              $query_part_arr = explode(':', $query_part);
              if (count($query_part_arr) == 1) {
                $main_query = $query_part_arr[0];
              }
            }
          }
          //Add buttons that allow to jump by terms
          $buttons = array();
          if (!empty($main_query)) {
            if (substr($main_query, 0, 1) == '"' && substr($main_query, -1) == '"') {
              //We need only one button if user want to see the whole string
              $main_query = substr($main_query, 1);
              $main_query = substr($main_query, 0, -1);
              $settings['search'] = $main_query;
            }
            else {
              //We should divide string and make button for each word
              $terms = explode(' ', $main_query);
              if (count($terms) > 1) {
                foreach ($terms as $term) {
                  $buttons[$term . '_button'] = array(
                    '#type' => 'button',
                    '#value' => $term,
                    '#attributes' => array(
                      'class' => array('flexpaper-highlight-button')
                    )
                  );
                }
              }
            }
            $buttons['search_string_button'] = array(
              '#type' => 'button',
              '#value' => $main_query,
              '#attributes' => array(
                'class' => array('flexpaper-highlight-button')
              )
            );
            $settings['search'] = $main_query;
            $label = array(
              '#markup' => '<h3>Search document</h3>',
            );
            $element[$delta] = array_merge($buttons, $element[$delta]);
            $element[$delta] = array_merge(array('label' => array('#markup' => '<h3>Search document</h3>',)), $element[$delta]);
          }
        }
        else {
          $element[$delta] = array(
            '#theme' => 'book_field_google_doc_view',
            '#file' => $file,
          );
        }
      }
    }
  }
  elseif ($display['type'] == 'book_field_thumbnail_formatter') {
    foreach ($items as $delta => $item) {
      $file_thumb = file_load(($item['fid_thumb']));
      $uri_thumb = $file_thumb->uri;

      $element[$delta] = array(
        '#theme' => 'image_formatter',
        '#item' => array('uri' => $uri_thumb),
        '#image_style' => $display['settings']['image_style'],
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function book_field_field_is_empty($item, $field) {
  return empty($item['fids']);
}

/**
 * Implements hook_field_presave().
 */
function book_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Make sure that each file which will be saved with this object has a
  // permanent status, so that it will not be removed when temporary files are
  // cleaned up.
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  foreach ($items as $index => $item) {
    if (isset($item['fid']) && $item['fid'] != 0) {
      $file = file_load($item['fid']);
      if (!$file->status) {
        $folder_name = $item['folder_name'];
        $destination_folder = file_default_scheme() . '://books/' . $folder_name;
        $source_folder = file_directory_temp() . '/' . $folder_name;

        //If directory already exist we should try to create another directory with numerical suffix
        if (is_dir($destination_folder)) {
          $i = 0;
          while (is_dir($destination_folder . '_' . $i)) {
            $i++;
          }
          $folder_name = $folder_name . '_' . $i;
          $destination_folder = file_default_scheme() . '://books/' . $folder_name;
        }

        //Copy folder with swf files from temporary directory to files directory
        mkdir($destination_folder);
        if ($file->filemime == 'application/pdf') {
          //If we have pdf file there should be thumbnail. Move thumbnail file first.
          $file_thumb = file_load($item['fid_thumb']);
          _book_field_file_move($file_thumb, $folder_name);
          $directory = dir($source_folder);
          while (FALSE !== ($readdirectory = $directory->read())) {
            $PathDir = $source_folder . '/' . $readdirectory;
            if (is_dir($PathDir)) {
              continue;
            }
            copy($PathDir, $destination_folder . '/' . $readdirectory);
          }
        }
        $items[$index]['folder_name'] = $folder_name;
        //Move original file
        _book_field_file_move($file, $folder_name);
      }
    }
  }
}

/**
 * Remove special characters that prevent flexpaper work
 */
function _book_field_remove_special_chars($string) {
  $string = str_replace('?', '', $string);
  $string = str_replace('#', '', $string);
  $string = str_replace('&', '', $string);
  return $string;
}

/**
 * Implements hook_field_delete().
 */
function book_field_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Delete all files and directory where this files contain.
  //We shouldn't perform it when import is processing
  $batch_info = & batch_get();
  if (!empty($batch_info)) {
    foreach ($batch_info['sets'] as $batch_instance) {
      if ($batch_instance['finished'] == 'migrate_ui_batch_finish') {
        //If it is an import process, we should just delete record from file_managed table about pdf and thumb files.
        foreach ($items as $item) {
          if (isset($item['fid_thumb']) && ($file = file_load($item['fid_thumb']))) {
            db_delete('file_managed')->condition('fid', $file->fid)->execute();
          }
          if (isset($item['fid']) && ($file = file_load($item['fid']))) {
            db_delete('file_managed')->condition('fid', $file->fid)->execute();
          }
        }
        return;
      }
    }
  }
  foreach ($items as $item) {
    if (isset($item['fid_thumb']) && ($file = file_load($item['fid_thumb']))) {
      file_delete($file);
    }
    if (isset($item['fid']) && ($file = file_load($item['fid']))) {
      file_delete($file);
    }
    if (!empty($item['folder_name'])) {
      $directory = file_default_scheme() . '://books/' . $item['folder_name'];
      file_unmanaged_delete_recursive($directory);
    }
  }
}

/**
 * Moves file from temporary directory to permanent directory and set status = 1.
 */
function _book_field_file_move($file, $folder) {
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  $file_name = drupal_basename($file->uri);
  $directory = file_default_scheme() . '://books/' . $folder;
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  $file = file_move($file, file_default_scheme() . '://books/' . $folder . '/' . $file_name);
}

/**
 * Implements hook_theme().
 */
function book_field_theme() {
  return array(
    'flexpaper_mode_switcher' => array(
      'template' => 'theme/flexpaper-mode-switcher',
      'variables' => array('link_html5' => NULL, 'link_flash' => NULL, 'link_html' => NULL)
    ),
    'flexpaper_desktop_toolbar' => array(
      'template' => 'theme/flexpaper-desktop-toolbar',
      'variables' => array('viewer_id' => NULL, 'image_path' => NULL)
    ),
    'flexpaper_mobile_toolbar' => array(
      'template' => 'theme/flexpaper-mobile-toolbar',
      'variables' => array('viewer_id' => NULL, 'image_path' => NULL)
    ),
    'flexpaper_container' => array(
      'template' => 'theme/flexpaper-container',
    ),
    'book_field_flexpaper_view' => array(
      'variables' => array('file' => NULL, 'file_swf' => NULL, 'file_thumb' => NULL, 'icon_directory' => NULL),
    ),
    'book_field_google_doc_view' => array(
      'variables' => array('file' => NULL, 'file_thumb' => NULL, 'icon_directory' => NULL),
    ),
  );
}

/**
 * Theme function for the googledoc formatter.
 */
function theme_book_field_google_doc_view($variables) {
  $file = (object) $variables['file'];
  $url = file_create_url($file->uri);
  $out = '<iframe src="https://docs.google.com/viewer?url=' . $url . '&embedded=true" style="width:720px; height:500px;" frameborder="1"></iframe>';
  if (!empty($file_thumb)) {
    $uri = $file->uri;
    $uri_thumb = $file_thumb->uri;
    $style = 'compressing';
    $text = '<img src="' . image_style_url($style, $uri_thumb) . '">';
    $options['html'] = TRUE;
    $out = $out . '<h1>' . $file->filename . '</h1>' . l($text, file_create_url($uri), $options);
  }
  else {
    $out = $out . theme_file_link($variables);
  }
  return $out;
}

/**
 * Theme function for the flexpaper formatter.
 */
function theme_book_field_flexpaper_view($variables) {
  $out = theme_file_link($variables);
  $query = array_diff_key($_GET, array('q' => 1));
  $link_html5 = url($_GET['q'], array('query' => array_merge($query, array('view_mode' => 'html5'))));
  $link_html = url($_GET['q'], array('query' => array_merge($query, array('view_mode' => 'html'))));
  $link_flash = url($_GET['q'], array('query' => array_merge($query, array('view_mode' => 'flash'))));
  $out = $out . theme('flexpaper_mode_switcher', array(
    'link_html5' => $link_html5,
    'link_flash' => $link_flash,
    'link_html' => $link_html
  ));
  $out = $out . theme('flexpaper_container');
  //@TODO Maybe we could add thumbnail here
  return $out;
}

/**
 * Get real file name without extension
 */
function get_real_file_name($file) {
  $uri = $file->uri;
  $real_file_name = drupal_basename($uri);
  $arr = explode('.', $real_file_name);
  $arr_length = count($arr);
  if ($arr_length > 1) {
    //Exclude name of file extension
    unset($arr[$arr_length - 1]);
    $real_file_name = implode('.', $arr);
  }
  else {
    $real_file_name = $arr[0];
  }
  return $real_file_name;
}

/**
 * Get real file extension
 */
function _book_field_get_file_extension($file) {
  $url_info = parse_url($file->uri);
  $pathinfo = pathinfo($url_info['path']);
  return $pathinfo['extension'];
}