<?php

/**
 * Return summary of what referenced fields are enabled for filtering
 *
 * @param $field
 * @param $ref_filters
 * @return string
 */
function filters_ui_entityreference_summary($field, $ref_filters) {
    $summary = "";
    $filterable_fields = _filters_ui_entityreference_get_referenced_filterable_fields($field);
    if (!empty($filterable_fields)) {
        if (empty($ref_filters)) {
            $summary = 'No filters are chosen';
        } else {
            $summary = "";
            $filters = "";
            foreach ($ref_filters as $ref_type_name => $ref_type_filters) {
                foreach ($ref_type_filters as $ref_filter_name => $ref_filter) {
                    $instance = field_info_instance("node", $ref_filter_name, $ref_type_name);
                    if ($instance && $ref_filter['state'] == 'visible') {
                        $filters = $filters . $instance['label'] . ", ";
                    }
                }
                $filters = substr($filters, 0, strlen($filters) - 2);
                if (!empty($filters)) {
                    $summary = $summary . "Filters for content type " . $ref_type_name . ": " . $filters . "<br>";
                }
            }
        }
    }
    return $summary;
}

/**
 * Bulding settings form for choosing by which referenced field need to filter or not
 *
 * @param $field
 * @param $ref_filters
 * @param $form
 * @param $form_state
 * @return mixed
 */
function filters_ui_entityreference_settings_form($field, $ref_filters, $form, &$form_state) {
    $filterable_fields = _filters_ui_entityreference_get_referenced_filterable_fields($field);
    if (!empty($filterable_fields)) {

        foreach ($filterable_fields as $ref_type => $filters_list) {
            $chosen_filters = array();
            foreach ($filters_list as $filter_name => $filter) {
                if (isset($ref_filters[$ref_type])) {
                    if ($ref_filters[$ref_type][$filter_name]['state'] == 'visible') {
                        array_push($chosen_filters, $filter_name);
                    }
                }
            }
            $form[$ref_type] = array(
                '#type' => 'fieldset',
                '#title' => t('Filters for content type ' . $ref_type),
            );
            $form[$ref_type]['filters'] = array(
                '#type' => 'checkboxes',
                '#options' => $filters_list,
                '#default_value' => $chosen_filters,
                '#title' => t('Choose fields for filtering'),
            );
        }
        $context = array(
            'field' => $field,
        );
        drupal_alter('filters_ui_entityreference_filter_settings_form', $form, $form_state, $context);
        return $form;
    } else {
        return array();
    }
}

/**
 * Deleting information about field from information structure
 *
 * @param $field
 * @param $bundle
 * @param $facet_filters_settings
 * @param $filter
 */
function filters_ui_entityreference_delete_field($field, $bundle, &$facet_filters_settings, $filter) {
    //Delete information about referenced filters
    if (isset($filter['referenced_filters'])) {
        if (isset($facet_filters_settings[$field['type']][$field['field_name']]['settings'])) {
            $facet_filters_settings[$field['type']][$field['field_name']]['settings'] = array();
        }
    }
}

/**
 * Add information about field to information structure
 *
 * @param $field
 * @param $bundle
 * @param $facet_filters_settings
 * @param $filter
 */
function filters_ui_entityreference_add_field($field, $bundle, &$facet_filters_settings, $filter) {
    if (!isset($facet_filters_settings[$field['type']][$field['field_name']])) {
        $facet_filters_settings[$field['type']][$field['field_name']] = array();
    }
    if ($filter['state'] == 'visible') {
        $facet_filters_settings[$field['type']][$field['field_name']]['state'] = TRUE;
    } else {
        $facet_filters_settings[$field['type']][$field['field_name']]['state'] = FALSE;
    }

    //Add information about referenced filters
    if (isset($filter['referenced_filters'])) {
        $entity_reference_filters_settings = array();
        foreach ($filter['referenced_filters'] as $ref_bundle => $ref_filters) {
            foreach ($ref_filters as $ref_filter_name => $ref_filter) {
                if ($ref_filter['state'] == 'visible') {
                    $entity_reference_filters_settings[$ref_filter_name] = array();
                }
            }
        }
        $facet_filters_settings[$field['type']][$field['field_name']]['settings'] = $entity_reference_filters_settings;
    }
}

/**
 * Return list of referenced filterable fields for each referencable_type for some field
 */
function _filters_ui_entityreference_get_referenced_filterable_fields($field) {
    $referenced_filterable_fields = array();
    if ($field['type'] == 'entityreference' && $field['settings']['target_type'] == 'node') {
        foreach ($field['settings']['handler_settings']['target_bundles'] as $ref_type) {
            $ref_instances = field_info_instances('node', $ref_type);
            $filters_list = array();
            foreach ($ref_instances as $ref_instance) {
                $ref_field = field_info_field($ref_instance['field_name']);
                if (is_field_filterable($ref_field)) {
                    $filters_list[$ref_instance['field_name']] = $ref_instance['label'];
                }
            }
            if (!empty($filters_list)) {
                $referenced_filterable_fields[$ref_type] = $filters_list;
            }
        }
    }
    return $referenced_filterable_fields;
}
