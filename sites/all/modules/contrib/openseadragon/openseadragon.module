<?php
/**
 * @file
 * Contains core functions for the OpenSeadragon module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_permission().
 */
function openseadragon_permission() {
  return array(
    'generate openseadragon files' => array(
      'title' => t('Generate openseadragon files'),
      'description' => t('Generate openseadragon files.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function openseadragon_theme() {
  $items = array();

  $items['openseadragon'] = array(
    'variables' => array(
      'images' => array(),
      'image_style' => 'large',
    ),
  );

  $items['openseadragon_dzi'] = array(
    'variables' => array(
      'size' => NULL,
      'overlap' => NULL,
      'format' => NULL,
      'width' => NULL,
      'height' => NULL,
    ),
    'template' => 'openseadragon',
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function openseadragon_page_alter($variables) {
  drupal_add_css(drupal_get_path('module', 'openseadragon') . '/openseadragon.css');
  drupal_add_js(drupal_get_path('module', 'openseadragon') . '/openseadragon.js');
  drupal_add_js(libraries_get_path('openseadragon') . '/openseadragon.min.js');
  
  $url = file_create_url('public://deepzoom');
  $url = parse_url($url);
  drupal_add_js(array('openseadragon_files'=>$url['path'],'openseadragon_library'=>'/' . libraries_get_path('openseadragon')), 'setting');
}

/**
 * OpenSeadragon generator callback.
 */
function openseadragon_generate_openseadragon($images, $method = 'batch') {
  if (function_exists($function = "openseadragon_generate_openseadragon_{$method}")) {
    return $function($images);
  }
  return FALSE;
}

/**
 * OpenSeadragon processor - Memory.
 *
 * @TODO - Add this in future release.
 */
function openseadragon_generate_openseadragon_memory($images) {
  return FALSE;
}

/**
 * OpenSeadragon processor - Batch API.
 */
function openseadragon_generate_openseadragon_batch($images) {
  $return = array();

  $batch = array(
    'title' => t('Generating OpenSeadragon files'),
    'operations' => array(),
  );
  foreach ($images as $md5 => $uri) {
    $return[$uri] = TRUE;
    if (!file_exists("public://deepzoom/{$md5}.dzi")) {
      $batch['operations'][] = array('openseadragon_generate_openseadragon_batch_process', array($uri, $md5));
      $return[$uri] = FALSE;
    }
  }

  if (count($batch['operations']) > 0 && user_access('generate openseadragon files'))  {
    batch_set($batch);
    batch_process();
  }

  return $return;
}

/**
 * OpenSeadragon processor - Batch API process callback.
 */
function openseadragon_generate_openseadragon_batch_process($uri, $md5, &$context) {
 if (empty($context['sandbox'])) {
    $context['sandbox']['image'] = openseadragon_generate_image_info($uri, $md5);
    $context['sandbox']['config'] = variable_get('openseadragon_config', array(
      'tile_size' => 254,
      'tile_overlap' => 1,
    ));
    $context['sandbox']['level'] = 0;
    $context['sandbox']['column'] = 0;
    $context['sandbox']['row'] = 0;
    $context['sandbox']['level_progress'] = 0;
    $context['sandbox']['total_progress'] = 0;
  }

  $count = 0;
  $max = 10;
  while ($count < $max && $context['sandbox']['total_progress'] < $context['sandbox']['image']['count']) {
    $level_dir = "public://deepzoom/{$context['sandbox']['image']['md5']}_files/{$context['sandbox']['level']}";

    // Setup level directory and temporary image.
    if ($context['sandbox']['level_progress'] == 0) {
      if (file_prepare_directory($level_dir, FILE_CREATE_DIRECTORY)) {
        $image = image_load($uri);
        image_effect_apply($image, array(
          'effect callback' => 'image_resize_effect',
          'data' => array(
            'width' => $context['sandbox']['image']['levels'][$context['sandbox']['level']]['width'],
            'height' => $context['sandbox']['image']['levels'][$context['sandbox']['level']]['height'],
          ),
        ));
        image_save($image, "{$level_dir}/._temp.{$context['sandbox']['image']['extension']}");
      }
    }

    // Tile processing.
    // @TODO - Make a seperate function for this.
    if (!file_exists("{$level_dir}/{$context['sandbox']['column']}_{$context['sandbox']['row']}.{$context['sandbox']['image']['extension']}")) {
      $offset_x = $context['sandbox']['column'] == 0 ? 0 : $context['sandbox']['config']['tile_overlap'];
      $offset_y = $context['sandbox']['row'] == 0 ? 0 : $context['sandbox']['config']['tile_overlap'];
      $x = ($context['sandbox']['column'] * $context['sandbox']['config']['tile_size']) - $offset_x;
      $y = ($context['sandbox']['row'] * $context['sandbox']['config']['tile_size']) - $offset_y;

      $width = $context['sandbox']['config']['tile_size'] + ($context['sandbox']['column'] == 0 ? 1 : 2) * $context['sandbox']['config']['tile_overlap'];
      $height = $context['sandbox']['config']['tile_size'] + ($context['sandbox']['row'] == 0 ? 1 : 2) * $context['sandbox']['config']['tile_overlap'];
      $crop_width = min($width, $context['sandbox']['image']['levels'][$context['sandbox']['level']]['width'] - $x);
      $crop_height = min($height, $context['sandbox']['image']['levels'][$context['sandbox']['level']]['height'] - $y);

      $temp_image = image_load("{$level_dir}/._temp.{$context['sandbox']['image']['extension']}");
      image_effect_apply($temp_image, array(
        'effect callback' => 'image_crop_effect',
        'data' => array(
          'anchor' => "{$x}-{$y}",
          'width' => $crop_width,
          'height' => $crop_height,
        ),
      ));
      image_save($temp_image, "{$level_dir}/{$context['sandbox']['column']}_{$context['sandbox']['row']}.{$context['sandbox']['image']['extension']}");
      unset($temp_image);
    }

    // Increment counters.
    $count++;
    $context['sandbox']['level_progress']++;
    $context['sandbox']['total_progress']++;

    // Incrememnt rows and columns.
    $context['sandbox']['row']++;
    if ($context['sandbox']['row'] >= $context['sandbox']['image']['levels'][$context['sandbox']['level']]['rows']) {
      $context['sandbox']['row'] = 0;
      $context['sandbox']['column']++;
    }

    // Rollover level counter and cleanup.
    if ($context['sandbox']['level_progress'] >= $context['sandbox']['image']['levels'][$context['sandbox']['level']]['count']) {
      file_unmanaged_delete("{$level_dir}/._temp.{$context['sandbox']['image']['extension']}");

      $context['sandbox']['row'] = 0;
      $context['sandbox']['column'] = 0;
      $context['sandbox']['level_progress'] = 0;
      $context['sandbox']['level']++;
    }
  }

  // Set progress percentage.
  if ($context['sandbox']['total_progress'] != $context['sandbox']['image']['count']) {
    $context['finished'] = $context['sandbox']['total_progress'] / $context['sandbox']['image']['count'];
  }

  // Finish and generate DZI file.
  else {
    file_unmanaged_save_data(theme('openseadragon_dzi', array(
      'size' => $context['sandbox']['config']['tile_size'],
      'overlap' => $context['sandbox']['config']['tile_overlap'],
      'format' => $context['sandbox']['image']['extension'],
      'width' => $context['sandbox']['image']['width'],
      'height' => $context['sandbox']['image']['height'],
    )), "public://deepzoom/{$context['sandbox']['image']['md5']}.dzi", FILE_EXISTS_REPLACE);
  }
}

/**
 * OpenSeadragon generate image info callback.
 */
function openseadragon_generate_image_info($uri, $md5) {
  $config = variable_get('openseadragon_config', array(
    'tile_size' => 254,
    'tile_overlap' => 1,
  ));
  extract($config);

  $image = image_load($uri);
  $info = array(
    'md5' => $md5,
    'width' => $image->info['width'],
    'height' => $image->info['height'],
    'extension' => $image->info['extension'],
    'max_dimension' => max(array($image->info['width'], $image->info['height'])),
    'levels' => array(),
    'count' => 0,
  );
  $info['num_levels'] = (int) ceil(log($info['max_dimension'], 2));

  foreach (range(9, $info['num_levels']) as $level) {
    $info['levels'][$level] = array();
    $info['levels'][$level]['scale'] = pow(0.5, $info['num_levels'] - $level);
    $info['levels'][$level]['width'] = (int) ceil($info['width'] * $info['levels'][$level]['scale']);
    $info['levels'][$level]['height'] = (int) ceil($image->info['height'] * $info['levels'][$level]['scale']);
    $info['levels'][$level]['columns'] = (int) ceil(floatval($info['levels'][$level]['width']) / $tile_size);
    $info['levels'][$level]['rows'] = (int) ceil(floatval($info['levels'][$level]['height']) / $tile_size);
    $info['levels'][$level]['count'] = $info['levels'][$level]['columns'] * $info['levels'][$level]['rows'];

    $info['count'] += $info['levels'][$level]['columns'] * $info['levels'][$level]['rows'];
  }

  return $info;
}

/**
 * Theme function; OpenSeadragon.
 */
function theme_openseadragon($variables) {
  $element = array();

  $images = is_array($variables['images']) ? $variables['images'] : array(md5_file($variables['images']) => $variables['images']);
  $status = openseadragon_generate_openseadragon($images, 'batch');

  foreach ($images as $md5 => $uri) {
    if ($status[$uri]) {
      $element[] = array(
        '#markup' => "<div id='openseadragon-{$md5}' class='openseadragon'></div>",
      );
    }

    // Fallback image.
    else {
      $element[] = array(
        '#theme' => 'image_style',
        '#path' => str_replace(DRUPAL_ROOT, '', $uri),
        '#style_name' => $variables['image_style'],
      );
    }
  }

  // Nothing to return;
  if (!isset($element[0])) {
    return FALSE;
  }

  return $element;
}
